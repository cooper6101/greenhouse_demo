{"version":3,"sources":["../src/index.ts","../src/exceptions.ts","../src/loginMethod.ts","../src/user.ts","../src/http.ts","../src/utils.ts","../src/api/accessToken.ts","../src/api/endUserApiKeys.ts","../src/api/mfa/verifyTotp.ts","../src/api/mfa/verifyGrant.ts","../src/api/magicLink.ts","../src/api/migrateUser.ts","../src/api/org.ts","../src/api/tokenVerificationMetadata.ts","../src/api/user.ts","../src/validators.ts","../src/api.ts"],"sourcesContent":["export type { AccessToken, CreateAccessTokenRequest } from \"./api/accessToken\"\nexport type { CreateMagicLinkRequest, MagicLink } from \"./api/magicLink\"\nexport type { StepUpMfaGrantType, VerifyTotpChallengeRequest, StepUpMfaVerifyTotpResponse } from \"./api/mfa/verifyTotp\"\nexport type { VerifyStepUpGrantRequest, StepUpMfaVerifyGrantResponse } from \"./api/mfa/verifyGrant\"\nexport type {\n    OrgQuery,\n    OrgQueryResponse,\n    CreateOrgRequest,\n    CreateSamlConnectionLinkResponse,\n    AddUserToOrgRequest,\n    ChangeUserRoleInOrgRequest,\n    RemoveUserFromOrgRequest,\n    UpdateOrgRequest,\n    FetchPendingInvitesParams,\n    PendingInvitesPage,\n    PendingInvite,\n    RevokePendingOrgInviteRequest,\n    FetchSamlSpMetadataResponse,\n    SetSamlIdpMetadataRequest,\n    IdpProvider,\n} from \"./api/org\"\nexport type { TokenVerificationMetadata } from \"./api/tokenVerificationMetadata\"\nexport type {\n    CreateUserRequest,\n    InviteUserToOrgRequest,\n    UpdateUserEmailRequest,\n    UpdateUserMetadataRequest,\n    UpdateUserPasswordRequest,\n    UserInOrgMetadata,\n    UsersInOrgQuery,\n    UsersInOrgPagedResponse,\n    UsersPagedResponse,\n    UsersQuery,\n    UserSignupQueryParams,\n} from \"./api/user\"\nexport type { MigrateUserFromExternalSourceRequest, MigrateUserPasswordRequest } from \"./api/migrateUser\"\nexport type { ApiKeysQueryRequest, ApiKeysCreateRequest, ApiKeyUpdateRequest } from \"./api/endUserApiKeys\"\nexport {\n    ApiKeyValidateException,\n    ApiKeyValidateRateLimitedException,\n    ApiKeyDeleteException,\n    ApiKeyUpdateException,\n    ApiKeyCreateException,\n    ApiKeyFetchException,\n    AccessTokenCreationException,\n    AddUserToOrgException,\n    BadRequestException,\n    RateLimitedException,\n    CreateOrgException,\n    CreateUserException,\n    ForbiddenException,\n    MagicLinkCreationException,\n    MigrateUserException,\n    MigrateUserPasswordException,\n    UserNotFoundException,\n    UnauthorizedException,\n    UnexpectedException,\n    UpdateUserEmailException,\n    UpdateUserMetadataException,\n    ChangeUserRoleInOrgException,\n    RemoveUserFromOrgException,\n    UpdateOrgException,\n    UpdateUserPasswordException,\n    InvalidRequestFieldsException,\n    FeatureGatedException,\n    MfaNotEnabledException,\n    IncorrectMfaCodeException,\n    RevokePendingOrgInviteException,\n} from \"./exceptions\"\nexport type { SocialLoginProvider, SamlLoginProvider, LoginMethod } from \"./loginMethod\"\nexport type { CustomRoleMappings, CustomRoleMapping } from \"./customRoleMappings\"\nexport type {\n    UserProperties,\n    User,\n    Org,\n    Organization,\n    CreatedOrg,\n    CreatedUser,\n    UserMetadata,\n    UserAndOrgMemberInfo,\n    OrgIdToOrgMemberInfo,\n    ApiKeyNew,\n    ApiKeyFull,\n    ApiKeyResultPage,\n    ApiKeyValidation,\n    PersonalApiKeyValidation,\n    OrgApiKeyValidation,\n    InternalUser,\n    InternalOrgMemberInfo,\n} from \"./user\"\nexport { UserClass, OrgMemberInfo, OrgRoleStructure, toUser, toOrgIdToOrgMemberInfo } from \"./user\"\nexport { getApis } from \"./api\"\nexport { parseSnakeCaseToCamelCase } from \"./utils\"\n","export class CreateUserException extends Error {\n    readonly fieldToErrors: { [fieldName: string]: string[] }\n    constructor(message: string) {\n        super(message)\n        this.fieldToErrors = JSON.parse(message)\n    }\n}\n\nexport class MigrateUserException extends Error {\n    readonly fieldToErrors: { [fieldName: string]: string[] }\n    constructor(message: string) {\n        super(message)\n        this.fieldToErrors = JSON.parse(message)\n    }\n}\n\nexport class MigrateUserPasswordException extends Error {\n    readonly fieldToErrors: { [fieldName: string]: string[] }\n    constructor(message: string) {\n        super(message)\n        this.fieldToErrors = JSON.parse(message)\n    }\n}\n\nexport class CreateOrgException extends Error {\n    readonly fieldToErrors: { [fieldName: string]: string[] }\n    constructor(message: string) {\n        super(message)\n        this.fieldToErrors = JSON.parse(message)\n    }\n}\n\nexport class AddUserToOrgException extends Error {\n    readonly fieldToErrors: { [fieldName: string]: string[] }\n    constructor(message: string) {\n        super(message)\n        this.fieldToErrors = JSON.parse(message)\n    }\n}\n\nexport class ChangeUserRoleInOrgException extends Error {\n    readonly fieldToErrors: { [fieldName: string]: string[] }\n    constructor(message: string) {\n        super(message)\n        this.fieldToErrors = JSON.parse(message)\n    }\n}\n\nexport class RemoveUserFromOrgException extends Error {\n    readonly fieldToErrors: { [fieldName: string]: string[] }\n    constructor(message: string) {\n        super(message)\n        this.fieldToErrors = JSON.parse(message)\n    }\n}\n\nexport class UpdateOrgException extends Error {\n    readonly fieldToErrors: { [fieldName: string]: string[] }\n    constructor(message: string) {\n        super(message)\n        this.fieldToErrors = JSON.parse(message)\n    }\n}\n\nexport class RevokePendingOrgInviteException extends Error {\n    readonly fieldToErrors: { [fieldName: string]: string[] }\n    constructor(message: string) {\n        super(message)\n        this.fieldToErrors = JSON.parse(message)\n    }\n}\n\nexport class ForbiddenException extends Error {\n    readonly message: string\n    readonly status: number\n    constructor(message: string) {\n        super(message)\n        this.message = message\n        this.status = 403\n    }\n}\n\nexport class MagicLinkCreationException extends Error {\n    readonly fieldToErrors: { [fieldName: string]: string[] }\n    constructor(message: string) {\n        super(message)\n        this.fieldToErrors = JSON.parse(message)\n    }\n}\n\nexport class AccessTokenCreationException extends Error {\n    readonly fieldToErrors: { [fieldName: string]: string[] }\n    constructor(message: string) {\n        super(message)\n        this.fieldToErrors = JSON.parse(message)\n    }\n}\n\nexport class UnauthorizedException extends Error {\n    readonly message: string\n    readonly status: number\n    constructor(message: string) {\n        super(message)\n        this.message = message\n        this.status = 401\n    }\n}\n\nexport class UnexpectedException extends Error {\n    readonly message: string\n    readonly status: number\n    constructor(message: string) {\n        super(message)\n        this.message = message\n        this.status = 503\n    }\n}\n\nexport class UpdateUserEmailException extends Error {\n    readonly fieldToErrors: { [fieldName: string]: string[] }\n    constructor(message: string) {\n        super(message)\n        this.fieldToErrors = JSON.parse(message)\n    }\n}\n\nexport class UpdateUserPasswordException extends Error {\n    readonly fieldToErrors: { [fieldName: string]: string[] }\n    constructor(message: string) {\n        super(message)\n        this.fieldToErrors = JSON.parse(message)\n    }\n}\n\nexport class UpdateUserMetadataException extends Error {\n    readonly fieldToErrors: { [fieldName: string]: string[] }\n    constructor(message: string) {\n        super(message)\n        this.fieldToErrors = JSON.parse(message)\n    }\n}\n\nexport class UserNotFoundException extends Error {}\n\nexport class ApiKeyValidateException extends Error {\n    readonly fieldToErrors: { [fieldName: string]: string[] }\n    constructor(message: string) {\n        super(message)\n        this.fieldToErrors = JSON.parse(message)\n    }\n}\n\nexport class ApiKeyValidateRateLimitedException extends Error {\n    readonly waitSeconds: number\n    readonly userFacingError: string\n    readonly errorCode: string\n    constructor(errorBody: string) {\n        super(errorBody)\n        const parsedErrorBody = JSON.parse(errorBody)\n        this.waitSeconds = parsedErrorBody.wait_seconds\n        this.userFacingError = parsedErrorBody.user_facing_error\n        this.errorCode = parsedErrorBody.error_code\n    }\n}\n\nexport class RateLimitedException extends Error {\n    constructor(message: string) {\n        super(message)\n    }\n}\n\nexport class ApiKeyDeleteException extends Error {\n    readonly fieldToErrors: { [fieldName: string]: string[] }\n    constructor(message: string) {\n        super(message)\n        this.fieldToErrors = JSON.parse(message)\n    }\n}\n\nexport class ApiKeyUpdateException extends Error {\n    readonly fieldToErrors: { [fieldName: string]: string[] }\n    constructor(message: string) {\n        super(message)\n        this.fieldToErrors = JSON.parse(message)\n    }\n}\n\nexport class ApiKeyCreateException extends Error {\n    readonly fieldToErrors: { [fieldName: string]: string[] }\n    constructor(message: string) {\n        super(message)\n        this.fieldToErrors = JSON.parse(message)\n    }\n}\n\nexport class ApiKeyFetchException extends Error {\n    readonly fieldToErrors: { [fieldName: string]: string[] }\n    constructor(message: string) {\n        super(message)\n        this.fieldToErrors = JSON.parse(message)\n    }\n}\n\nexport class BadRequestException extends Error {\n    readonly fieldToErrors: { [fieldName: string]: string[] }\n    constructor(message: string) {\n        super(message)\n        this.fieldToErrors = JSON.parse(message)\n    }\n}\n\nexport class FeatureGatedException extends Error {\n    constructor() {\n        super(\"This feature isn't available on your current pricing plan\")\n    }\n}\n\nexport class IncorrectMfaCodeException extends Error {}\n\nexport class MfaNotEnabledException extends Error {}\n\nexport class InvalidRequestFieldsException extends Error {\n    readonly errorBody: {\n        error_code: string\n        user_facing_error: string\n        field_errors?: { [fieldName: string]: string }\n        user_facing_errors?: { [fieldName: string]: string }\n    }\n\n    constructor(errorBody: string) {\n        super(\"Invalid request\")\n        this.errorBody = JSON.parse(errorBody)\n    }\n}\n","export type SocialLoginProvider =\n    | \"Google\"\n    | \"GitHub\"\n    | \"Microsoft\"\n    | \"Slack\"\n    | \"LinkedIn\"\n    | \"Salesforce\"\n    | \"Xero\"\n    | \"QuickBooks Online\"\nexport type SamlLoginProvider = \"Google\" | \"Rippling\" | \"OneLogin\" | \"JumpCloud\" | \"Okta\" | \"Azure\" | \"Duo\" | \"Generic\"\n\nexport type LoginMethod =\n    | {\n          loginMethod: \"password\"\n      }\n    | {\n          loginMethod: \"magic_link\"\n      }\n    | {\n          loginMethod: \"social_sso\"\n          provider: SocialLoginProvider\n      }\n    | {\n          loginMethod: \"email_confirmation_link\"\n      }\n    | {\n          loginMethod: \"saml_sso\"\n          provider: SamlLoginProvider\n          orgId: string\n      }\n    | {\n          loginMethod: \"impersonation\"\n      }\n    | {\n          loginMethod: \"generated_from_backend_api\"\n      }\n    | {\n          loginMethod: \"unknown\"\n      }\n\nexport type InternalLoginMethod =\n    | {\n          login_method: \"password\"\n      }\n    | {\n          login_method: \"magic_link\"\n      }\n    | {\n          login_method: \"social_sso\"\n          provider: SocialLoginProvider\n      }\n    | {\n          login_method: \"email_confirmation_link\"\n      }\n    | {\n          login_method: \"saml_sso\"\n          provider: SamlLoginProvider\n          org_id: string\n      }\n    | {\n          login_method: \"impersonation\"\n      }\n    | {\n          login_method: \"generated_from_backend_api\"\n      }\n    | {\n          login_method: \"unknown\"\n      }\n\nexport function toLoginMethod(snake_case?: InternalLoginMethod): LoginMethod {\n    if (!snake_case) {\n        return { loginMethod: \"unknown\" }\n    }\n\n    switch (snake_case.login_method) {\n        case \"password\":\n            return { loginMethod: \"password\" }\n        case \"magic_link\":\n            return { loginMethod: \"magic_link\" }\n        case \"social_sso\":\n            return { loginMethod: \"social_sso\", provider: snake_case.provider }\n        case \"email_confirmation_link\":\n            return { loginMethod: \"email_confirmation_link\" }\n        case \"saml_sso\":\n            return { loginMethod: \"saml_sso\", provider: snake_case.provider, orgId: snake_case.org_id }\n        case \"impersonation\":\n            return { loginMethod: \"impersonation\" }\n        case \"generated_from_backend_api\":\n            return { loginMethod: \"generated_from_backend_api\" }\n        default:\n            return { loginMethod: \"unknown\" }\n    }\n}\n","import { InternalLoginMethod, LoginMethod, toLoginMethod } from \"./loginMethod\"\n\nexport type UserProperties = { [key: string]: unknown }\n\nexport type User = {\n    userId: string\n    orgIdToOrgMemberInfo?: OrgIdToOrgMemberInfo\n    email: string\n    firstName?: string\n    lastName?: string\n    username?: string\n    legacyUserId?: string\n    impersonatorUserId?: string\n    metadata?: { [key: string]: any }\n    properties?: UserProperties\n    loginMethod: LoginMethod\n    activeOrgId?: string\n}\n\nexport class UserClass {\n    public userId: string\n    public orgIdToUserOrgInfo?: { [orgId: string]: OrgMemberInfo }\n\n    // Metadata about the user\n    public email: string\n    public firstName?: string\n    public lastName?: string\n    public username?: string\n    public properties?: UserProperties\n    public loginMethod: LoginMethod\n    public activeOrgId?: string\n\n    // If you used our migration APIs to migrate this user from a different system,\n    // this is their original ID from that system.\n    public legacyUserId?: string\n    public impersonatorUserId?: string\n\n    constructor(user: User) {\n        this.userId = user.userId\n        this.orgIdToUserOrgInfo = user.orgIdToOrgMemberInfo\n\n        this.email = user.email\n        this.firstName = user.firstName\n        this.lastName = user.lastName\n        this.username = user.username\n\n        this.legacyUserId = user.legacyUserId\n        this.impersonatorUserId = user.impersonatorUserId\n        this.properties = user.properties\n        this.loginMethod = user.loginMethod\n        this.activeOrgId = user.activeOrgId\n    }\n\n    public getActiveOrg(): OrgMemberInfo | undefined {\n        if (!this.activeOrgId) {\n            return undefined\n        }\n        return this.getOrg(this.activeOrgId)\n    }\n\n    public getActiveOrgId(): string | undefined {\n        return this.activeOrgId\n    }\n\n    public getOrg(orgId: string): OrgMemberInfo | undefined {\n        if (!this.orgIdToUserOrgInfo) {\n            return undefined\n        }\n\n        if (!this.orgIdToUserOrgInfo.hasOwnProperty(orgId)) {\n            return undefined\n        }\n\n        return this.orgIdToUserOrgInfo[orgId]\n    }\n\n    public getOrgByName(orgName: string): OrgMemberInfo | undefined {\n        if (!this.orgIdToUserOrgInfo) {\n            return undefined\n        }\n\n        const urlSafeOrgName = orgName.toLowerCase().replace(/ /g, \"-\")\n        for (const orgId in this.orgIdToUserOrgInfo) {\n            const orgMemberInfo = this.getOrg(orgId)\n            if (orgMemberInfo?.urlSafeOrgName === urlSafeOrgName) {\n                return orgMemberInfo\n            }\n        }\n\n        return undefined\n    }\n\n    public getUserProperty(key: string): unknown | undefined {\n        if (!this.properties || !this.properties.hasOwnProperty(key)) {\n            return undefined\n        }\n\n        return this.properties[key]\n    }\n\n    public getOrgs(): OrgMemberInfo[] {\n        if (!this.orgIdToUserOrgInfo) {\n            return []\n        }\n\n        return Object.values(this.orgIdToUserOrgInfo)\n    }\n\n    public isImpersonating(): boolean {\n        return !!this.impersonatorUserId\n    }\n\n    public isRole(orgId: string, role: string): boolean {\n        const orgMemberInfo = this.getOrg(orgId)\n        if (!orgMemberInfo) {\n            return false\n        }\n\n        return orgMemberInfo.isRole(role)\n    }\n\n    public isAtLeastRole(orgId: string, role: string): boolean {\n        const orgMemberInfo = this.getOrg(orgId)\n        if (!orgMemberInfo) {\n            return false\n        }\n\n        return orgMemberInfo.isAtLeastRole(role)\n    }\n\n    public hasPermission(orgId: string, permission: string): boolean {\n        const orgMemberInfo = this.getOrg(orgId)\n        if (!orgMemberInfo) {\n            return false\n        }\n\n        return orgMemberInfo.hasPermission(permission)\n    }\n\n    public hasAllPermissions(orgId: string, permissions: string[]): boolean {\n        const orgMemberInfo = this.getOrg(orgId)\n        if (!orgMemberInfo) {\n            return false\n        }\n\n        return orgMemberInfo.hasAllPermissions(permissions)\n    }\n\n    public static fromUser(user: User): UserClass {\n        return new UserClass(user)\n    }\n}\n\nexport type Org = {\n    orgId: string\n    name: string\n    maxUsers?: number\n    isSamlConfigured: boolean\n    legacyOrgId?: string\n    metadata: { [key: string]: any }\n    customRoleMappingName?: string\n}\n\nexport type Organization = {\n    orgId: string\n    name: string\n    urlSafeOrgSlug: string\n    canSetupSaml: boolean\n    isSamlConfigured: boolean\n    isSamlInTestMode: boolean\n    maxUsers?: number\n    metadata?: { [key: string]: any }\n    domain?: string\n    extraDomains: string[]\n    domainAutojoin: boolean\n    domainRestrict: boolean\n    customRoleMappingName?: string\n    legacyOrgId?: string\n}\n\nexport type CreatedOrg = {\n    orgId: string\n    name: string\n}\n\nexport type CreatedUser = {\n    userId: string\n}\n\nexport type UserMetadata = {\n    userId: string\n\n    email: string\n    emailConfirmed: boolean\n    hasPassword: boolean\n\n    username?: string\n    firstName?: string\n    lastName?: string\n    pictureUrl?: string\n\n    locked: boolean\n    enabled: boolean\n    mfaEnabled: boolean\n    canCreateOrgs: boolean\n\n    createdAt: number\n    lastActiveAt: number\n\n    orgIdToOrgInfo?: OrgIdToOrgMemberInfo\n\n    // If you used our migration APIs to migrate this user from a different system,\n    //   this is their original ID from that system.\n    legacyUserId?: string\n    impersonatorUserId?: string\n    metadata?: { [key: string]: any }\n    properties?: { [key: string]: unknown }\n}\n\nexport class OrgMemberInfo {\n    public readonly orgId: string\n    public readonly orgName: string\n    public readonly orgMetadata: { [key: string]: unknown }\n    public readonly urlSafeOrgName: string\n    public readonly orgRoleStructure: OrgRoleStructure\n    public readonly legacyOrgId?: string\n\n    public readonly userAssignedRole: string\n    public readonly userInheritedRolesPlusCurrentRole: string[]\n    public readonly userPermissions: string[]\n    public readonly userAssignedAdditionalRoles: string[]\n\n    constructor(\n        orgId: string,\n        orgName: string,\n        orgMetadata: { [key: string]: any },\n        urlSafeOrgName: string,\n        userAssignedRole: string,\n        userInheritedRolesPlusCurrentRole: string[],\n        userPermissions: string[],\n        orgRoleStructure?: OrgRoleStructure,\n        userAssignedAdditionalRoles?: string[],\n        legacyOrgId?: string\n    ) {\n        this.orgId = orgId\n        this.orgName = orgName\n        this.orgMetadata = orgMetadata\n        this.urlSafeOrgName = urlSafeOrgName\n        this.orgRoleStructure = orgRoleStructure ?? OrgRoleStructure.SingleRole\n\n        this.userAssignedRole = userAssignedRole\n        this.userInheritedRolesPlusCurrentRole = userInheritedRolesPlusCurrentRole\n        this.userPermissions = userPermissions\n        this.userAssignedAdditionalRoles = userAssignedAdditionalRoles ?? []\n\n        this.legacyOrgId = legacyOrgId\n    }\n\n    // getters\n    public get assignedRole(): string {\n        return this.userAssignedRole\n    }\n\n    public get permissions(): string[] {\n        return this.userPermissions\n    }\n\n    get inheritedRolesPlusCurrentRole(): string[] {\n        return this.userInheritedRolesPlusCurrentRole\n    }\n\n    // validation methods\n    public isRole(role: string): boolean {\n        if (this.orgRoleStructure === OrgRoleStructure.MultiRole) {\n            return this.userAssignedRole === role || this.userAssignedAdditionalRoles.includes(role)\n        } else {\n            return this.userAssignedRole === role\n        }\n    }\n\n    public isAtLeastRole(role: string): boolean {\n        if (this.orgRoleStructure === OrgRoleStructure.MultiRole) {\n            return this.userAssignedRole === role || this.userAssignedAdditionalRoles.includes(role)\n        } else {\n            return this.userInheritedRolesPlusCurrentRole.includes(role)\n        }\n    }\n\n    public hasPermission(permission: string): boolean {\n        return this.userPermissions.includes(permission)\n    }\n\n    public hasAllPermissions(permissions: string[]): boolean {\n        return permissions.every((permission) => this.hasPermission(permission))\n    }\n\n    public static fromJSON(json: string): OrgMemberInfo {\n        const obj = JSON.parse(json)\n        try {\n            return new OrgMemberInfo(\n                obj.orgId,\n                obj.orgName,\n                obj.orgMetadata,\n                obj.urlSafeOrgName,\n                obj.userAssignedRole,\n                obj.userInheritedRolesPlusCurrentRole,\n                obj.userPermissions,\n                obj.orgRoleStructure,\n                obj.userAssignedAdditionalRoles,\n                obj.legacyOrgId\n            )\n        } catch (e) {\n            console.error(\n                \"Unable to parse UserOrgInfo. Make sure the JSON string is a stringified `UserOrgInfo` type.\",\n                e\n            )\n            throw e\n        }\n    }\n}\n\nexport type UserAndOrgMemberInfo = {\n    user: User\n    orgMemberInfo: OrgMemberInfo\n}\n\nexport type OrgIdToOrgMemberInfo = {\n    [orgId: string]: OrgMemberInfo\n}\n\nexport enum OrgRoleStructure {\n    SingleRole = \"single_role_in_hierarchy\",\n    MultiRole = \"multi_role\",\n}\n\n// These Internal types exist since the server returns snake case, but typescript/javascript\n// convention is camelCase.\nexport type InternalOrgMemberInfo = {\n    org_id: string\n    org_name: string\n    org_metadata: { [key: string]: any }\n    url_safe_org_name: string\n    org_role_structure: OrgRoleStructure\n    user_role: string\n    inherited_user_roles_plus_current_role: string[]\n    user_permissions: string[]\n    additional_roles: string[]\n    legacy_org_id?: string\n}\n\n// This type is used to represent the user returned from the refresh token.\nexport type InternalUser = {\n    user_id: string\n    org_id_to_org_member_info?: { [org_id: string]: InternalOrgMemberInfo }\n    org_member_info?: InternalOrgMemberInfo\n\n    email: string\n    first_name?: string\n    last_name?: string\n    username?: string\n    metadata?: { [key: string]: any }\n    properties?: { [key: string]: unknown }\n    login_method?: InternalLoginMethod\n\n    // If you used our migration APIs to migrate this user from a different system, this is their original ID from that system.\n    legacy_user_id?: string\n    impersonator_user_id?: string\n}\n\nexport function toUser(snake_case: InternalUser): User {\n    let orgIdToOrgMemberInfo: OrgIdToOrgMemberInfo | undefined\n    let activeOrgId: string | undefined\n    if (snake_case.org_member_info) {\n        orgIdToOrgMemberInfo = toOrgIdToOrgMemberInfo({\n            [snake_case.org_member_info.org_id]: snake_case.org_member_info,\n        })\n        activeOrgId = snake_case.org_member_info.org_id\n    } else {\n        orgIdToOrgMemberInfo = toOrgIdToOrgMemberInfo(snake_case.org_id_to_org_member_info)\n        activeOrgId = undefined\n    }\n\n    const camelCase: User = {\n        userId: snake_case.user_id,\n        orgIdToOrgMemberInfo,\n        activeOrgId,\n        email: snake_case.email,\n        firstName: snake_case.first_name,\n        lastName: snake_case.last_name,\n        username: snake_case.username,\n        legacyUserId: snake_case.legacy_user_id,\n        impersonatorUserId: snake_case.impersonator_user_id,\n        metadata: snake_case.metadata,\n        properties: snake_case.properties,\n        loginMethod: toLoginMethod(snake_case.login_method),\n    }\n\n    return camelCase\n}\n\nexport function toOrgIdToOrgMemberInfo(snake_case?: {\n    [org_id: string]: InternalOrgMemberInfo\n}): OrgIdToOrgMemberInfo | undefined {\n    if (snake_case === undefined) {\n        return undefined\n    }\n    const camelCase: OrgIdToOrgMemberInfo = {}\n\n    for (const key of Object.keys(snake_case)) {\n        const snakeCaseValue = snake_case[key]\n        if (snakeCaseValue) {\n            camelCase[key] = new OrgMemberInfo(\n                snakeCaseValue.org_id,\n                snakeCaseValue.org_name,\n                snakeCaseValue.org_metadata,\n                snakeCaseValue.url_safe_org_name,\n                snakeCaseValue.user_role,\n                snakeCaseValue.inherited_user_roles_plus_current_role,\n                snakeCaseValue.user_permissions,\n                snakeCaseValue.org_role_structure,\n                snakeCaseValue.additional_roles,\n                snakeCaseValue.legacy_org_id\n            )\n        }\n    }\n\n    return camelCase\n}\n\nexport type ApiKeyNew = {\n    apiKeyId: string\n    apiKeyToken: string\n}\n\nexport type ApiKeyFull = {\n    apiKeyId: string\n    createdAt: number\n    expiresAtSeconds: number\n    metadata: { [key: string]: any }\n    userId: string\n    orgId: string\n}\n\nexport type ApiKeyResultPage = {\n    apiKeys: ApiKeyFull[]\n    totalApiKeys: number\n    currentPage: number\n    pageSize: number\n    hasMoreResults: boolean\n}\n\nexport type ApiKeyValidation = {\n    metadata?: { [key: string]: any }\n    user?: UserMetadata\n    org?: Org\n    userInOrg?: OrgMemberInfo\n}\n\nexport type PersonalApiKeyValidation = {\n    metadata?: { [key: string]: any }\n    user: UserMetadata\n}\n\nexport type OrgApiKeyValidation = {\n    metadata?: { [key: string]: any }\n    org: Org\n    user?: UserMetadata\n    userInOrg?: OrgMemberInfo\n}\n","const BACKEND_API_BASE_URL = \"https://propelauth-api.com\";\n\nexport type HttpResponse = {\n    statusCode?: number\n    response: string\n}\n\nexport function httpRequest(\n    authUrl: URL,\n    apiKey: string,\n    path: string,\n    method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\" | \"PATCH\",\n    body?: string\n): Promise<HttpResponse> {\n    let headers: any = {\n        Authorization: \"Bearer \" + apiKey,\n        \"Content-Type\": \"application/json\",\n        \"X-Propelauth-url\": authUrl.hostname,\n    }\n\n    return fetch(BACKEND_API_BASE_URL + path, {\n        method,\n        headers,\n        body,\n    }).then((response) => {\n        return response.text().then((res) => {\n            return {\n                statusCode: response.status,\n                response: res,\n            }\n        })\n    })\n}\n","import { OrgMemberInfo } from \"./user\"\n\nconst idRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i\nconst hexRegex = /^[0-9a-fA-F]{32}$/i\n\nexport function isValidId(id: string): boolean {\n    return idRegex.test(id)\n}\n\nexport function isValidHex(id: string): boolean {\n    return hexRegex.test(id)\n}\n\nexport function removeBearerIfExists(token: string): string {\n    if (!token) {\n        return token\n    } else if (token.toLowerCase().startsWith(\"bearer \")) {\n        return token.substring(7)\n    } else {\n        return token\n    }\n}\n\nexport function formatQueryParameters(obj: { [key: string]: any }): string {\n    const params = new URLSearchParams()\n    for (const [key, value] of Object.entries(obj)) {\n        if (value !== undefined) {\n            params.set(key, value)\n        }\n    }\n    return params.toString()\n}\n\nexport function parseSnakeCaseToCamelCase(response: string) {\n    let parsedObject = JSON.parse(response)\n    return processKeys(parsedObject)\n}\n\nconst keysForValueNotToModify = [\"metadata\", \"org_metadata\"]\n\nfunction isOrgMemberInfo(value: any) {\n    return (\n        value &&\n        typeof value === \"object\" &&\n        value.hasOwnProperty(\"orgId\") &&\n        value.hasOwnProperty(\"orgName\") &&\n        value.hasOwnProperty(\"urlSafeOrgName\") &&\n        value.hasOwnProperty(\"orgMetadata\") &&\n        value.hasOwnProperty(\"userAssignedRole\") &&\n        value.hasOwnProperty(\"userInheritedRolesPlusCurrentRole\") &&\n        value.hasOwnProperty(\"userPermissions\")\n    )\n}\n\nfunction processKeys(obj: any): any {\n    let newObj: any = Array.isArray(obj) ? [] : {}\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key)) {\n            continue\n        }\n\n        let value = obj[key]\n        const doNotModifyValue = keysForValueNotToModify.includes(key)\n        if (!doNotModifyValue && value && typeof value === \"object\") {\n            value = processKeys(value)\n        }\n\n        if (isOrgMemberInfo(value)) {\n            value = new OrgMemberInfo(\n                value[\"orgId\"],\n                value[\"orgName\"],\n                value[\"orgMetadata\"],\n                value[\"urlSafeOrgName\"],\n                value[\"userAssignedRole\"],\n                value[\"userInheritedRolesPlusCurrentRole\"],\n                value[\"userPermissions\"],\n                value[\"orgRoleStructure\"],\n                value[\"userAssignedAdditionalRoles\"],\n                value[\"legacyOrgId\"]\n            )\n        }\n\n        let newKey\n        if (key === \"user_role\") {\n            newKey = \"userAssignedRole\"\n        } else if (key === \"inherited_user_roles_plus_current_role\") {\n            newKey = \"userInheritedRolesPlusCurrentRole\"\n        } else if (key === \"additional_roles\") {\n            newKey = \"userAssignedAdditionalRoles\"\n        } else {\n            newKey = camelCase(key)\n        }\n\n        newObj[newKey] = value\n    }\n    return newObj\n}\n\nfunction camelCase(key: string): string {\n    return key.replace(/_([a-z])/g, function (g) {\n        return g[1].toUpperCase()\n    })\n}\n","import { AccessTokenCreationException, RateLimitedException, UserNotFoundException } from \"../exceptions\"\nimport { httpRequest } from \"../http\"\nimport { isValidId } from \"../utils\"\n\nconst ENDPOINT_PATH = \"/api/backend/v1/access_token\"\n\nexport type CreateAccessTokenRequest = {\n    userId: string\n    durationInMinutes: number\n    activeOrgId?: string\n}\n\nexport type AccessToken = {\n    access_token: string\n}\n\n// POST\nexport function createAccessToken(\n    authUrl: URL,\n    integrationApiKey: string,\n    createAccessTokenRequest: CreateAccessTokenRequest\n): Promise<AccessToken> {\n    if (!isValidId(createAccessTokenRequest.userId)) {\n        throw new UserNotFoundException()\n    }\n\n    const request = {\n        user_id: createAccessTokenRequest.userId,\n        duration_in_minutes: createAccessTokenRequest.durationInMinutes,\n        active_org_id: createAccessTokenRequest.activeOrgId,\n    }\n    return httpRequest(authUrl, integrationApiKey, ENDPOINT_PATH, \"POST\", JSON.stringify(request)).then(\n        (httpResponse) => {\n            if (httpResponse.statusCode === 401) {\n                throw new Error(\"integrationApiKey is incorrect\")\n            } else if (httpResponse.statusCode === 429) {\n                throw new RateLimitedException(httpResponse.response)\n            } else if (httpResponse.statusCode === 400) {\n                throw new AccessTokenCreationException(httpResponse.response)\n            } else if (httpResponse.statusCode === 403) {\n                throw new UserNotFoundException()\n            } else if (httpResponse.statusCode === 404) {\n                throw new Error(\"Access token creation is not enabled\")\n            } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n                throw new Error(\"Unknown error when creating access token\")\n            }\n\n            return JSON.parse(httpResponse.response)\n        }\n    )\n}\n","import {\n    ApiKeyCreateException,\n    ApiKeyDeleteException,\n    ApiKeyFetchException,\n    ApiKeyUpdateException,\n    ApiKeyValidateException,\n    ApiKeyValidateRateLimitedException,\n    RateLimitedException,\n} from \"../exceptions\"\nimport { httpRequest } from \"../http\"\nimport { ApiKeyFull, ApiKeyNew, ApiKeyResultPage, ApiKeyValidation } from \"../user\"\nimport { formatQueryParameters, isValidHex, parseSnakeCaseToCamelCase, removeBearerIfExists } from \"../utils\"\n\nconst ENDPOINT_PATH = \"/api/backend/v1/end_user_api_keys\"\n\n// GET\nexport function fetchApiKey(authUrl: URL, integrationApiKey: string, apiKeyId: string): Promise<ApiKeyFull> {\n    if (!isValidHex(apiKeyId)) {\n        throw new ApiKeyFetchException(\"Invalid api key\")\n    }\n\n    return httpRequest(authUrl, integrationApiKey, `${ENDPOINT_PATH}/${apiKeyId}`, \"GET\").then((httpResponse) => {\n        if (httpResponse.statusCode === 401) {\n            throw new Error(\"integrationApiKey is incorrect\")\n        } else if (httpResponse.statusCode === 429) {\n            throw new RateLimitedException(httpResponse.response)\n        } else if (httpResponse.statusCode === 400) {\n            throw new ApiKeyFetchException(httpResponse.response)\n        } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n            throw new Error(\"Unknown error when creating the end user api key\")\n        }\n\n        return parseSnakeCaseToCamelCase(httpResponse.response)\n    })\n}\n\nexport type ApiKeysQueryRequest = {\n    orgId?: string\n    userId?: string\n    userEmail?: string\n    pageSize?: number\n    pageNumber?: number\n}\n\nexport function fetchCurrentApiKeys(\n    authUrl: URL,\n    integrationApiKey: string,\n    apiKeyQuery: ApiKeysQueryRequest\n): Promise<ApiKeyResultPage> {\n    const request = {\n        org_id: apiKeyQuery.orgId,\n        user_id: apiKeyQuery.userId,\n        user_email: apiKeyQuery.userEmail,\n        page_size: apiKeyQuery.pageSize,\n        page_number: apiKeyQuery.pageNumber,\n    }\n    const queryString = formatQueryParameters(request)\n\n    return httpRequest(authUrl, integrationApiKey, `${ENDPOINT_PATH}?${queryString}`, \"GET\").then((httpResponse) => {\n        if (httpResponse.statusCode === 401) {\n            throw new Error(\"integrationApiKey is incorrect\")\n        } else if (httpResponse.statusCode === 429) {\n            throw new RateLimitedException(httpResponse.response)\n        } else if (httpResponse.statusCode === 400) {\n            throw new ApiKeyFetchException(httpResponse.response)\n        } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n            throw new Error(\"Unknown error when creating the end user api key\")\n        }\n\n        return parseSnakeCaseToCamelCase(httpResponse.response)\n    })\n}\n\nexport function fetchArchivedApiKeys(\n    authUrl: URL,\n    integrationApiKey: string,\n    apiKeyQuery: ApiKeysQueryRequest\n): Promise<ApiKeyResultPage> {\n    const request = {\n        org_id: apiKeyQuery.orgId,\n        user_id: apiKeyQuery.userId,\n        user_email: apiKeyQuery.userEmail,\n        page_size: apiKeyQuery.pageSize,\n        page_number: apiKeyQuery.pageNumber,\n    }\n    const queryString = formatQueryParameters(request)\n\n    return httpRequest(authUrl, integrationApiKey, `${ENDPOINT_PATH}/archived?${queryString}`, \"GET\").then(\n        (httpResponse) => {\n            if (httpResponse.statusCode === 401) {\n                throw new Error(\"integrationApiKey is incorrect\")\n            } else if (httpResponse.statusCode === 429) {\n                throw new RateLimitedException(httpResponse.response)\n            } else if (httpResponse.statusCode === 400) {\n                throw new ApiKeyFetchException(httpResponse.response)\n            } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n                throw new Error(\"Unknown error when creating the end user api key\")\n            }\n\n            return parseSnakeCaseToCamelCase(httpResponse.response)\n        }\n    )\n}\n\n// POST\nexport type ApiKeysCreateRequest = {\n    orgId?: string\n    userId?: string\n    expiresAtSeconds?: number\n    metadata?: object\n}\n\nexport function createApiKey(\n    authUrl: URL,\n    integrationApiKey: string,\n    apiKeyCreate: ApiKeysCreateRequest\n): Promise<ApiKeyNew> {\n    const request = {\n        org_id: apiKeyCreate.orgId,\n        user_id: apiKeyCreate.userId,\n        expires_at_seconds: apiKeyCreate.expiresAtSeconds,\n        metadata: apiKeyCreate.metadata,\n    }\n\n    return httpRequest(authUrl, integrationApiKey, `${ENDPOINT_PATH}`, \"POST\", JSON.stringify(request)).then(\n        (httpResponse) => {\n            if (httpResponse.statusCode === 401) {\n                throw new Error(\"integrationApiKey is incorrect\")\n            } else if (httpResponse.statusCode === 429) {\n                throw new RateLimitedException(httpResponse.response)\n            } else if (httpResponse.statusCode === 400) {\n                throw new ApiKeyCreateException(httpResponse.response)\n            } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n                throw new Error(\"Unknown error when creating the end user api key\")\n            }\n\n            return parseSnakeCaseToCamelCase(httpResponse.response)\n        }\n    )\n}\n\nexport function validateApiKey(\n    authUrl: URL,\n    integrationApiKey: string,\n    apiKeyToken: string\n): Promise<ApiKeyValidation> {\n    const request = {\n        api_key_token: removeBearerIfExists(apiKeyToken),\n    }\n\n    return httpRequest(authUrl, integrationApiKey, `${ENDPOINT_PATH}/validate`, \"POST\", JSON.stringify(request)).then(\n        (httpResponse) => {\n            if (httpResponse.statusCode === 401) {\n                throw new Error(\"integrationApiKey is incorrect\")\n            } else if (httpResponse.statusCode === 400) {\n                throw new ApiKeyValidateException(httpResponse.response)\n            } else if (httpResponse.statusCode === 429) {\n                let rateLimitError: ApiKeyValidateRateLimitedException;\n                try {\n                    rateLimitError = new ApiKeyValidateRateLimitedException(httpResponse.response);\n                } catch (SyntaxError) {\n                    throw new RateLimitedException(httpResponse.response);\n                }\n                throw rateLimitError;\n            } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n                throw new Error(\"Unknown error when updating the end user api key\")\n            }\n\n            return parseSnakeCaseToCamelCase(httpResponse.response)\n        }\n    )\n}\n\n// PUT/PATCH\nexport type ApiKeyUpdateRequest = {\n    expiresAtSeconds?: number\n    metadata?: string\n}\n\nexport function updateApiKey(\n    authUrl: URL,\n    integrationApiKey: string,\n    apiKeyId: string,\n    apiKeyUpdate: ApiKeyUpdateRequest\n): Promise<boolean> {\n    if (!isValidHex(apiKeyId)) {\n        throw new ApiKeyUpdateException(\"Invalid api key\")\n    }\n\n    const request = {\n        expires_at_seconds: apiKeyUpdate.expiresAtSeconds,\n        metadata: apiKeyUpdate.metadata,\n    }\n\n    return httpRequest(\n        authUrl,\n        integrationApiKey,\n        `${ENDPOINT_PATH}/${apiKeyId}`,\n        \"PATCH\",\n        JSON.stringify(request)\n    ).then((httpResponse) => {\n        if (httpResponse.statusCode === 401) {\n            throw new Error(\"integrationApiKey is incorrect\")\n        } else if (httpResponse.statusCode === 429) {\n            throw new RateLimitedException(httpResponse.response)\n        } else if (httpResponse.statusCode === 400) {\n            throw new ApiKeyUpdateException(httpResponse.response)\n        } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n            throw new Error(\"Unknown error when updating the end user api key\")\n        }\n\n        return true\n    })\n}\n\n// DELETE\nexport function deleteApiKey(authUrl: URL, integrationApiKey: string, apiKeyId: string): Promise<boolean> {\n    if (!isValidHex(apiKeyId)) {\n        throw new ApiKeyDeleteException(\"Invalid api key\")\n    }\n\n    return httpRequest(authUrl, integrationApiKey, `${ENDPOINT_PATH}/${apiKeyId}`, \"DELETE\").then((httpResponse) => {\n        if (httpResponse.statusCode === 401) {\n            throw new Error(\"integrationApiKey is incorrect\")\n        } else if (httpResponse.statusCode === 429) {\n            throw new RateLimitedException(httpResponse.response)\n        } else if (httpResponse.statusCode === 400) {\n            throw new ApiKeyDeleteException(httpResponse.response)\n        } else if (httpResponse.statusCode === 404) {\n            return false\n        } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n            throw new Error(\"Unknown error when deleting the end user api key\")\n        }\n\n        return true\n    })\n}\n","import {\n    BadRequestException,\n    FeatureGatedException,\n    IncorrectMfaCodeException,\n    InvalidRequestFieldsException,\n    MfaNotEnabledException,\n    UnauthorizedException,\n    UnexpectedException,\n    UserNotFoundException,\n} from \"../../exceptions\"\nimport { httpRequest } from \"../../http\"\n\nconst STEP_UP_VERIFY_TOTP_ENDPOINT_PATH = \"/api/backend/v1/mfa/step-up/verify-totp\"\n\nexport enum StepUpMfaGrantType {\n    ONE_TIME_USE = \"ONE_TIME_USE\",\n    TIME_BASED = \"TIME_BASED\",\n}\n\nexport type VerifyTotpChallengeRequest = {\n    actionType: string\n    userId: string\n    code: string\n    grantType: StepUpMfaGrantType\n    validForSeconds: number\n}\n\nexport type StepUpMfaVerifyTotpResponse = {\n    stepUpGrant: string\n}\n\n// POST\nexport function verifyStepUpTotpChallenge(\n    authUrl: URL,\n    integrationApiKey: string,\n    verifyTotpChallengeRequest: VerifyTotpChallengeRequest\n): Promise<StepUpMfaVerifyTotpResponse> {\n    const request = {\n        action_type: verifyTotpChallengeRequest.actionType,\n        user_id: verifyTotpChallengeRequest.userId,\n        code: verifyTotpChallengeRequest.code,\n        grant_type: verifyTotpChallengeRequest.grantType,\n        valid_for_seconds: verifyTotpChallengeRequest.validForSeconds,\n    }\n    return httpRequest(\n        authUrl,\n        integrationApiKey,\n        STEP_UP_VERIFY_TOTP_ENDPOINT_PATH,\n        \"POST\",\n        JSON.stringify(request)\n    ).then((httpResponse) => {\n        // Success case\n        if (httpResponse.statusCode && httpResponse.statusCode < 400) {\n            const responseData = JSON.parse(httpResponse.response)\n            return {\n                stepUpGrant: responseData.step_up_grant,\n            }\n        }\n\n        const errorResponse = httpResponse.response ? JSON.parse(httpResponse.response) : {}\n\n        if (httpResponse.statusCode === 401) {\n            throw new UnauthorizedException(\"integrationApiKey is incorrect\")\n        } else if (errorResponse.error_code === \"user_not_found\") {\n            throw new UserNotFoundException()\n        } else if (errorResponse.error_code === \"mfa_not_enabled\") {\n            throw new MfaNotEnabledException()\n        } else if (errorResponse.error_code === \"incorrect_mfa_code\") {\n            throw new IncorrectMfaCodeException()\n        } else if (errorResponse.error_code === \"invalid_request_fields\") {\n            throw new InvalidRequestFieldsException(httpResponse.response)\n        } else if (errorResponse.error_code === \"feature_gated\") {\n            throw new FeatureGatedException()\n        } else {\n            throw new UnexpectedException(\"Unknown error when verifying the TOTP challenge\")\n        }\n    })\n}\n","import {\n    BadRequestException,\n    FeatureGatedException,\n    RateLimitedException,\n    UnauthorizedException,\n    UnexpectedException,\n} from \"../../exceptions\"\nimport { httpRequest } from \"../../http\"\n\nconst STEP_UP_VERIFY_GRANT_ENDPOINT_PATH = \"/api/backend/v1/mfa/step-up/verify-grant\"\n\nexport type VerifyStepUpGrantRequest = {\n    actionType: string\n    userId: string\n    grant: string\n}\n\nexport type StepUpMfaVerifyGrantResponse = {\n    success: boolean\n}\n\n// POST\nexport function verifyStepUpGrant(\n    authUrl: URL,\n    integrationApiKey: string,\n    verifyStepUpGrantRequest: VerifyStepUpGrantRequest\n): Promise<StepUpMfaVerifyGrantResponse> {\n    const request = {\n        action_type: verifyStepUpGrantRequest.actionType,\n        user_id: verifyStepUpGrantRequest.userId,\n        grant: verifyStepUpGrantRequest.grant,\n    }\n    return httpRequest(\n        authUrl,\n        integrationApiKey,\n        STEP_UP_VERIFY_GRANT_ENDPOINT_PATH,\n        \"POST\",\n        JSON.stringify(request)\n    ).then((httpResponse) => {\n        // Success case\n        if (httpResponse.statusCode && httpResponse.statusCode < 400) {\n            return {\n                success: true,\n            }\n        }\n\n        let errorResponse: any = {}\n        try {\n            errorResponse = httpResponse.response ? JSON.parse(httpResponse.response) : {}\n        } catch (e) {\n            console.error(\"Failed to parse error response\", e)\n            errorResponse = {}\n        }\n\n        if (httpResponse.statusCode === 401 || errorResponse.error_code === \"unauthorized\") {\n            throw new UnauthorizedException(\"integrationApiKey is incorrect\")\n        } else if (httpResponse.statusCode === 429) {\n            throw new RateLimitedException(httpResponse.response)\n        } else if (errorResponse.error_code === \"invalid_request_fields\") {\n            const fieldToErrors = errorResponse.field_errors || {}\n            if (fieldToErrors[\"grant\"] == \"grant_not_found\") {\n                return {\n                    success: false,\n                }\n            } else {\n                throw new BadRequestException(httpResponse.response)\n            }\n        } else if (errorResponse.error_code === \"feature_gated\") {\n            throw new FeatureGatedException()\n        } else {\n            throw new UnexpectedException(\"Unknown error when verifying step up grant\")\n        }\n    })\n}\n","import { MagicLinkCreationException, RateLimitedException } from \"../exceptions\"\nimport { httpRequest } from \"../http\"\n\nconst ENDPOINT_PATH = \"/api/backend/v1/magic_link\"\n\nexport type CreateMagicLinkRequest = {\n    email: string\n    redirectToUrl?: string\n    expiresInHours?: number\n    createNewUserIfOneDoesntExist?: boolean\n}\n\nexport type MagicLink = {\n    url: string\n}\n\n// POST\nexport function createMagicLink(\n    authUrl: URL,\n    integrationApiKey: string,\n    createMagicLinkRequest: CreateMagicLinkRequest\n): Promise<MagicLink> {\n    const request = {\n        email: createMagicLinkRequest.email,\n        redirect_to_url: createMagicLinkRequest.redirectToUrl,\n        expires_in_hours: createMagicLinkRequest.expiresInHours,\n        create_new_user_if_one_doesnt_exist: createMagicLinkRequest.createNewUserIfOneDoesntExist,\n    }\n    return httpRequest(authUrl, integrationApiKey, ENDPOINT_PATH, \"POST\", JSON.stringify(request)).then(\n        (httpResponse) => {\n            if (httpResponse.statusCode === 401) {\n                throw new Error(\"integrationApiKey is incorrect\")\n            } else if (httpResponse.statusCode === 429) {\n                throw new RateLimitedException(httpResponse.response)\n            } else if (httpResponse.statusCode === 400) {\n                throw new MagicLinkCreationException(httpResponse.response)\n            } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n                throw new Error(\"Unknown error when creating magic link\")\n            }\n\n            return JSON.parse(httpResponse.response)\n        }\n    )\n}\n","import { MigrateUserException, RateLimitedException, MigrateUserPasswordException } from \"../exceptions\"\nimport { httpRequest } from \"../http\"\nimport { CreatedUser } from \"../user\"\nimport { isValidId, parseSnakeCaseToCamelCase } from \"../utils\"\n\nconst ENDPOINT_PATH = \"/api/backend/v1/migrate_user\"\n\n// POST\nexport type MigrateUserFromExternalSourceRequest = {\n    email: string\n    emailConfirmed: boolean\n\n    existingUserId?: string\n    existingPasswordHash?: string\n    existingMfaBase32EncodedSecret?: string\n    askUserToUpdatePasswordOnLogin?: boolean\n\n    enabled?: boolean\n\n    firstName?: string\n    lastName?: string\n    username?: string\n    pictureUrl?: string\n    properties?: { [key: string]: any }\n}\n\nexport function migrateUserFromExternalSource(\n    authUrl: URL,\n    integrationApiKey: string,\n    migrateUserFromExternalSourceRequest: MigrateUserFromExternalSourceRequest\n): Promise<CreatedUser> {\n    const {\n        email,\n        emailConfirmed: email_confirmed,\n        existingUserId: existing_user_id,\n        existingPasswordHash: existing_password_hash,\n        existingMfaBase32EncodedSecret: existing_mfa_base32_encoded_secret,\n        askUserToUpdatePasswordOnLogin: update_password_required,\n        enabled,\n        firstName: first_name,\n        lastName: last_name,\n        username,\n        pictureUrl: picture_url,\n        properties,\n    } = migrateUserFromExternalSourceRequest\n    const request = {\n        email,\n        email_confirmed,\n\n        existing_user_id,\n        existing_password_hash,\n        existing_mfa_base32_encoded_secret,\n        update_password_required,\n\n        enabled,\n\n        first_name,\n        last_name,\n        username,\n        picture_url,\n        properties,\n    }\n    return httpRequest(authUrl, integrationApiKey, `${ENDPOINT_PATH}/`, \"POST\", JSON.stringify(request)).then(\n        (httpResponse) => {\n            if (httpResponse.statusCode === 401) {\n                throw new Error(\"integrationApiKey is incorrect\")\n            } else if (httpResponse.statusCode === 429) {\n                throw new RateLimitedException(httpResponse.response)\n            } else if (httpResponse.statusCode === 400) {\n                throw new MigrateUserException(httpResponse.response)\n            } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n                throw new Error(\"Unknown error when migrating user\")\n            }\n\n            return parseSnakeCaseToCamelCase(httpResponse.response)\n        }\n    )\n}\n\nexport type MigrateUserPasswordRequest = {\n    userId: string\n    passwordHash: string\n}\n\nexport function migrateUserPassword(\n    authUrl: URL,\n    integrationApiKey: string,\n    migrateUserPasswordRequest: MigrateUserPasswordRequest\n): Promise<boolean> {\n    if (!isValidId(migrateUserPasswordRequest.userId)) {\n        return Promise.resolve(false)\n    }\n\n    const request = {\n        user_id: migrateUserPasswordRequest.userId,\n        password_hash: migrateUserPasswordRequest.passwordHash,\n    }\n    return httpRequest(authUrl, integrationApiKey, `${ENDPOINT_PATH}/password`, \"POST\", JSON.stringify(request)).then(\n        (httpResponse) => {\n            if (httpResponse.statusCode === 401) {\n                throw new Error(\"integrationApiKey is incorrect\")\n            } else if (httpResponse.statusCode === 429) {\n                throw new RateLimitedException(httpResponse.response)\n            } else if (httpResponse.statusCode === 400) {\n                throw new MigrateUserPasswordException(httpResponse.response)\n            } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n                throw new Error(\"Unknown error when migrating user password\")\n            }\n\n            return parseSnakeCaseToCamelCase(httpResponse.response)\n        }\n    )\n}\n","import { CustomRoleMappings } from \"../customRoleMappings\"\nimport {\n    AddUserToOrgException,\n    ChangeUserRoleInOrgException,\n    CreateOrgException,\n    RateLimitedException,\n    RemoveUserFromOrgException,\n    RevokePendingOrgInviteException,\n    UpdateOrgException,\n} from \"../exceptions\"\nimport { httpRequest } from \"../http\"\nimport { CreatedOrg, Org, Organization } from \"../user\"\nimport { isValidId, parseSnakeCaseToCamelCase } from \"../utils\"\n\nconst BASE_ENDPOINT_PATH = \"/api/backend/v1\"\nconst ORG_ENDPOINT_PATH = BASE_ENDPOINT_PATH + \"/org\"\n\n// GET\nexport function fetchOrg(authUrl: URL, integrationApiKey: string, orgId: string): Promise<Organization | null> {\n    if (!isValidId(orgId)) {\n        return Promise.resolve(null)\n    }\n\n    return httpRequest(authUrl, integrationApiKey, `${ORG_ENDPOINT_PATH}/${orgId}`, \"GET\").then((httpResponse) => {\n        if (httpResponse.statusCode === 401) {\n            throw new Error(\"integrationApiKey is incorrect\")\n        } else if (httpResponse.statusCode === 429) {\n            throw new RateLimitedException(httpResponse.response)\n        } else if (httpResponse.statusCode === 404) {\n            return null\n        } else if (httpResponse.statusCode === 426) {\n            throw new Error(\n                \"Cannot use organizations unless B2B support is enabled. Enable it in your PropelAuth dashboard.\"\n            )\n        } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n            throw new Error(\"Unknown error when fetching org\")\n        }\n\n        return parseSnakeCaseToCamelCase(httpResponse.response)\n    })\n}\n\nexport function fetchCustomRoleMappings(authUrl: URL, integrationApiKey: string): Promise<CustomRoleMappings> {\n    return httpRequest(authUrl, integrationApiKey, \"/api/backend/v1/custom_role_mappings\", \"GET\").then(\n        (httpResponse) => {\n            if (httpResponse.statusCode === 401) {\n                throw new Error(\"integrationApiKey is incorrect\")\n            } else if (httpResponse.statusCode === 429) {\n                throw new RateLimitedException(httpResponse.response)\n            } else if (httpResponse.statusCode === 426) {\n                throw new Error(\n                    \"Cannot use organizations unless B2B support is enabled. Enable it in your PropelAuth dashboard.\"\n                )\n            } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n                throw new Error(\"Unknown error when fetching custom role mappings\")\n            }\n\n            return parseSnakeCaseToCamelCase(httpResponse.response)\n        }\n    )\n}\n\nexport type FetchPendingInvitesParams = {\n    orgId?: string\n    pageSize?: number\n    pageNumber?: number\n}\nexport type PendingInvite = {\n    inviteeEmail: string\n    orgId: string\n    orgName: string\n    roleInOrg: string\n    additionalRolesInOrg: string[]\n    createdAt: number\n    expiresAt: number\n    inviterEmail?: string\n    inviterUserId?: string\n}\nexport type PendingInvitesPage = {\n    totalInvites: number\n    currentPage: number\n    pageSize: number\n    hasMoreResults: boolean\n    invites: PendingInvite[]\n}\nexport function fetchPendingInvites(\n    authUrl: URL,\n    integrationApiKey: string,\n    params?: FetchPendingInvitesParams\n): Promise<PendingInvitesPage> {\n    const queryParams = new URLSearchParams()\n    if (params?.orgId) {\n        queryParams.set(\"org_id\", params.orgId)\n    }\n    if (params?.pageSize) {\n        queryParams.set(\"page_size\", params.pageSize.toString())\n    }\n    if (params?.pageNumber) {\n        queryParams.set(\"page_number\", params.pageNumber.toString())\n    }\n    const path = `/api/backend/v1/pending_org_invites?${queryParams.toString()}`\n    return httpRequest(authUrl, integrationApiKey, path, \"GET\").then((httpResponse) => {\n        if (httpResponse.statusCode === 401) {\n            throw new Error(\"integrationApiKey is incorrect\")\n        } else if (httpResponse.statusCode === 429) {\n            throw new RateLimitedException(httpResponse.response)\n        } else if (httpResponse.statusCode === 426) {\n            throw new Error(\n                \"Cannot use organizations unless B2B support is enabled. Enable it in your PropelAuth dashboard.\"\n            )\n        } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n            throw new Error(\"Unknown error when fetching pending invites\")\n        }\n\n        return parseSnakeCaseToCamelCase(httpResponse.response)\n    })\n}\n\nexport type FetchSamlSpMetadataResponse = {\n    entityId: string\n    acsUrl: string\n    logoutUrl: string\n}\n\nexport function fetchSamlSpMetadata(\n    authUrl: URL,\n    integrationApiKey: string,\n    orgId: string\n): Promise<FetchSamlSpMetadataResponse> {\n    const path = BASE_ENDPOINT_PATH + `/saml_sp_metadata/${orgId}`\n    return httpRequest(authUrl, integrationApiKey, path, \"GET\").then((httpResponse) => {\n        if (httpResponse.statusCode === 401) {\n            throw new Error(\"integrationApiKey is incorrect\")\n        } else if (httpResponse.statusCode === 429) {\n            throw new RateLimitedException(httpResponse.response)\n        } else if (httpResponse.statusCode === 426) {\n            throw new Error(\n                \"Cannot use organizations unless B2B support is enabled. Enable it in your PropelAuth dashboard.\"\n            )\n        } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n            throw new Error(\"Unknown error when fetching custom role mappings\")\n        }\n\n        return parseSnakeCaseToCamelCase(httpResponse.response)\n    })\n}\n\n// POST\nexport type OrgQuery = {\n    pageSize?: number\n    pageNumber?: number\n    orderBy?: \"CREATED_AT_ASC\" | \"CREATED_AT_DESC\" | \"NAME\"\n    name?: string\n    legacyOrgId?: string\n    domain?: string\n}\n\nexport type OrgQueryResponse = {\n    orgs: Org[]\n    totalOrgs: number\n    currentPage: number\n    pageSize: number\n    hasMoreResults: boolean\n}\n\nexport function fetchOrgByQuery(authUrl: URL, integrationApiKey: string, query: OrgQuery): Promise<OrgQueryResponse> {\n    const request = {\n        page_size: query.pageSize,\n        page_number: query.pageNumber,\n        order_by: query.orderBy,\n        name: query.name,\n        legacy_org_id: query.legacyOrgId,\n        domain: query.domain,\n    }\n    return httpRequest(authUrl, integrationApiKey, `${ORG_ENDPOINT_PATH}/query`, \"POST\", JSON.stringify(request)).then(\n        (httpResponse) => {\n            if (httpResponse.statusCode === 401) {\n                throw new Error(\"integrationApiKey is incorrect\")\n            } else if (httpResponse.statusCode === 429) {\n                throw new RateLimitedException(httpResponse.response)\n            } else if (httpResponse.statusCode === 400) {\n                throw new Error(\"Invalid query \" + httpResponse.response)\n            } else if (httpResponse.statusCode === 426) {\n                throw new Error(\n                    \"Cannot use organizations unless B2B support is enabled. Enable it in your PropelAuth dashboard.\"\n                )\n            } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n                throw new Error(\"Unknown error when fetching orgs by query\")\n            }\n\n            return JSON.parse(httpResponse.response, function (key, value) {\n                if (key === \"org_id\") {\n                    this.orgId = value\n                } else if (key === \"org_name\") {\n                    this.name = value\n                } else if (key === \"max_users\") {\n                    this.maxUsers = value\n                } else if (key === \"legacy_org_id\") {\n                    this.legacyOrgId = value\n                } else if (key === \"total_orgs\") {\n                    this.totalOrgs = value\n                } else if (key === \"current_page\") {\n                    this.currentPage = value\n                } else if (key === \"page_size\") {\n                    this.pageSize = value\n                } else if (key === \"has_more_results\") {\n                    this.hasMoreResults = value\n                } else {\n                    return value\n                }\n            })\n        }\n    )\n}\n\nexport type CreateOrgRequest = {\n    name: string\n    domain?: string\n    enableAutoJoiningByDomain?: boolean\n    membersMustHaveMatchingDomain?: boolean\n    maxUsers?: number\n    customRoleMappingName?: string\n    legacyOrgId?: string\n}\n\ntype CreateOrgApiRequest = {\n    name: string\n    domain?: string\n    enable_auto_joining_by_domain?: boolean\n    members_must_have_matching_domain?: boolean\n    max_users?: number\n    custom_role_mapping_name?: string\n    legacy_org_id?: string\n}\n\nexport function createOrg(\n    authUrl: URL,\n    integrationApiKey: string,\n    createOrgRequest: CreateOrgRequest\n): Promise<CreatedOrg> {\n    const {\n        name,\n        domain,\n        enableAutoJoiningByDomain = false,\n        membersMustHaveMatchingDomain = false,\n        maxUsers,\n        customRoleMappingName,\n        legacyOrgId,\n    } = createOrgRequest\n    const request: CreateOrgApiRequest = {\n        name,\n        enable_auto_joining_by_domain: enableAutoJoiningByDomain,\n        members_must_have_matching_domain: membersMustHaveMatchingDomain,\n    }\n    if (domain) {\n        request[\"domain\"] = domain\n    }\n    if (maxUsers) {\n        request[\"max_users\"] = maxUsers\n    }\n    if (legacyOrgId) {\n        request[\"legacy_org_id\"] = legacyOrgId\n    }\n    if (customRoleMappingName) {\n        request[\"custom_role_mapping_name\"] = customRoleMappingName\n    }\n    return httpRequest(authUrl, integrationApiKey, `${ORG_ENDPOINT_PATH}/`, \"POST\", JSON.stringify(request)).then(\n        (httpResponse) => {\n            if (httpResponse.statusCode === 401) {\n                throw new Error(\"integrationApiKey is incorrect\")\n            } else if (httpResponse.statusCode === 429) {\n                throw new RateLimitedException(httpResponse.response)\n            } else if (httpResponse.statusCode === 400) {\n                throw new CreateOrgException(httpResponse.response)\n            } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n                throw new Error(\"Unknown error when creating org\")\n            }\n\n            return parseSnakeCaseToCamelCase(httpResponse.response)\n        }\n    )\n}\n\nexport type AddUserToOrgRequest = {\n    userId: string\n    orgId: string\n    role: string\n    additionalRoles?: string[]\n}\n\nexport function addUserToOrg(\n    authUrl: URL,\n    integrationApiKey: string,\n    addUserToOrgRequest: AddUserToOrgRequest\n): Promise<boolean> {\n    const request = {\n        user_id: addUserToOrgRequest.userId,\n        org_id: addUserToOrgRequest.orgId,\n        role: addUserToOrgRequest.role,\n        additional_roles: addUserToOrgRequest.additionalRoles ?? [],\n    }\n    return httpRequest(authUrl, integrationApiKey, `${ORG_ENDPOINT_PATH}/add_user`, \"POST\", JSON.stringify(request)).then(\n        (httpResponse) => {\n            if (httpResponse.statusCode === 401) {\n                throw new Error(\"integrationApiKey is incorrect\")\n            } else if (httpResponse.statusCode === 429) {\n                throw new RateLimitedException(httpResponse.response)\n            } else if (httpResponse.statusCode === 400) {\n                throw new AddUserToOrgException(httpResponse.response)\n            } else if (httpResponse.statusCode === 404) {\n                return false\n            } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n                throw new Error(\"Unknown error when adding user to org\")\n            }\n\n            return true\n        }\n    )\n}\n\nexport type ChangeUserRoleInOrgRequest = {\n    userId: string\n    orgId: string\n    role: string\n    additionalRoles?: string[]\n}\n\nexport function changeUserRoleInOrg(\n    authUrl: URL,\n    integrationApiKey: string,\n    changeUserRoleInOrgRequest: ChangeUserRoleInOrgRequest\n): Promise<boolean> {\n    const request = {\n        user_id: changeUserRoleInOrgRequest.userId,\n        org_id: changeUserRoleInOrgRequest.orgId,\n        role: changeUserRoleInOrgRequest.role,\n        additional_roles: changeUserRoleInOrgRequest.additionalRoles ?? [],\n    }\n    return httpRequest(\n        authUrl,\n        integrationApiKey,\n        `${ORG_ENDPOINT_PATH}/change_role`,\n        \"POST\",\n        JSON.stringify(request)\n    ).then((httpResponse) => {\n        if (httpResponse.statusCode === 401) {\n            throw new Error(\"integrationApiKey is incorrect\")\n        } else if (httpResponse.statusCode === 429) {\n            throw new RateLimitedException(httpResponse.response)\n        } else if (httpResponse.statusCode === 400) {\n            throw new ChangeUserRoleInOrgException(httpResponse.response)\n        } else if (httpResponse.statusCode === 404) {\n            return false\n        } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n            throw new Error(\"Unknown error when changing users role in org\")\n        }\n\n        return true\n    })\n}\n\nexport type RemoveUserFromOrgRequest = {\n    userId: string\n    orgId: string\n}\n\nexport function removeUserFromOrg(\n    authUrl: URL,\n    integrationApiKey: string,\n    removeUserFromOrgRequest: RemoveUserFromOrgRequest\n): Promise<boolean> {\n    const request = {\n        user_id: removeUserFromOrgRequest.userId,\n        org_id: removeUserFromOrgRequest.orgId,\n    }\n    return httpRequest(\n        authUrl,\n        integrationApiKey,\n        `${ORG_ENDPOINT_PATH}/remove_user`,\n        \"POST\",\n        JSON.stringify(request)\n    ).then((httpResponse) => {\n        if (httpResponse.statusCode === 401) {\n            throw new Error(\"integrationApiKey is incorrect\")\n        } else if (httpResponse.statusCode === 429) {\n            throw new RateLimitedException(httpResponse.response)\n        } else if (httpResponse.statusCode === 400) {\n            throw new RemoveUserFromOrgException(httpResponse.response)\n        } else if (httpResponse.statusCode === 404) {\n            return false\n        } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n            throw new Error(\"Unknown error when removing users from org\")\n        }\n\n        return true\n    })\n}\n\nexport function allowOrgToSetupSamlConnection(\n    authUrl: URL,\n    integrationApiKey: string,\n    orgId: string\n): Promise<boolean> {\n    if (!isValidId(orgId)) {\n        return Promise.resolve(false)\n    }\n\n    return httpRequest(authUrl, integrationApiKey, `${ORG_ENDPOINT_PATH}/${orgId}/allow_saml`, \"POST\").then(\n        (httpResponse) => {\n            if (httpResponse.statusCode === 401) {\n                throw new Error(\"integrationApiKey is incorrect\")\n            } else if (httpResponse.statusCode === 429) {\n                throw new RateLimitedException(httpResponse.response)\n            } else if (httpResponse.statusCode === 404) {\n                return false\n            } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n                throw new Error(\"Unknown error when allowing org to setup SAML connection\")\n            }\n\n            return true\n        }\n    )\n}\n\nexport function disallowOrgToSetupSamlConnection(\n    authUrl: URL,\n    integrationApiKey: string,\n    orgId: string\n): Promise<boolean> {\n    if (!isValidId(orgId)) {\n        return Promise.resolve(false)\n    }\n\n    return httpRequest(authUrl, integrationApiKey, `${ORG_ENDPOINT_PATH}/${orgId}/disallow_saml`, \"POST\").then(\n        (httpResponse) => {\n            if (httpResponse.statusCode === 401) {\n                throw new Error(\"integrationApiKey is incorrect\")\n            } else if (httpResponse.statusCode === 429) {\n                throw new RateLimitedException(httpResponse.response)\n            } else if (httpResponse.statusCode === 404) {\n                return false\n            } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n                throw new Error(\"Unknown error when disallowing org to setup SAML connection\")\n            }\n\n            return true\n        }\n    )\n}\n\nexport type CreateSamlConnectionLinkResponse = {\n    url: string\n}\n\nexport async function createOrgSamlConnectionLink(\n    authUrl: URL,\n    integrationApiKey: string,\n    orgId: string,\n    expiresInSeconds?: number\n): Promise<CreateSamlConnectionLinkResponse> {\n    if (!isValidId(orgId)) {\n        return Promise.reject(new Error(\"Invalid orgId\"))\n    }\n\n    const request = {\n        expires_in_seconds: expiresInSeconds,\n    }\n\n    const response = await httpRequest(\n        authUrl,\n        integrationApiKey,\n        `${ORG_ENDPOINT_PATH}/${orgId}/create_saml_connection_link`,\n        \"POST\",\n        JSON.stringify(request)\n    )\n    if (response.statusCode === 401) {\n        throw new Error(\"integrationApiKey is incorrect\")\n    } else if (response.statusCode === 429) {\n        throw new RateLimitedException(response.response)\n    } else if (response.statusCode === 404) {\n        throw new Error(\"Org not found\")\n    } else if (response.statusCode && response.statusCode >= 400) {\n        throw new Error(`Error when creating SAML connection link: ${response.response}`)\n    }\n\n    return JSON.parse(response.response)\n}\n\nexport type SetSamlIdpMetadataRequest = {\n    idpEntityId: string\n    idpSsoUrl: string\n    idpCertificate: string\n    provider: IdpProvider\n}\n\nexport type IdpProvider = \"Google\" | \"Rippling\" | \"OneLogin\" | \"JumpCloud\" | \"Okta\" | \"Azure\" | \"Duo\" | \"Generic\";\n\nexport function setSamlIdpMetadata(\n    authUrl: URL,\n    integrationApiKey: string,\n    orgId: string,\n    setSamlIdpMetadataRequest: SetSamlIdpMetadataRequest\n): Promise<boolean> {\n    if (!isValidId(orgId)) {\n        return Promise.resolve(false)\n    }\n\n    let request = {\n        org_id: orgId,\n        idp_entity_id: setSamlIdpMetadataRequest.idpEntityId,\n        idp_sso_url: setSamlIdpMetadataRequest.idpSsoUrl,\n        idp_certificate: setSamlIdpMetadataRequest.idpCertificate,\n        provider: setSamlIdpMetadataRequest.provider,\n    };\n\n    return httpRequest(\n        authUrl,\n        integrationApiKey,\n        `${BASE_ENDPOINT_PATH}/saml_idp_metadata`,\n        \"POST\",\n        JSON.stringify(request)\n    ).then(\n        (httpResponse) => {\n            if (httpResponse.statusCode === 401) {\n                throw new Error(\"integrationApiKey is incorrect\")\n            } else if (httpResponse.statusCode === 429) {\n                throw new RateLimitedException(httpResponse.response)\n            } else if (httpResponse.statusCode === 400) {\n                throw new UpdateOrgException(httpResponse.response)\n            } else if (httpResponse.statusCode === 404) {\n                return false\n            } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n                throw new Error(\"Unknown error when setting the SAML IdP metadata for an org's SAML connection\")\n            }\n\n            return true\n        }\n    )\n}\n\nexport function samlGoLive(\n    authUrl: URL,\n    integrationApiKey: string,\n    orgId: string\n): Promise<boolean> {\n    if (!isValidId(orgId)) {\n        return Promise.resolve(false)\n    }\n\n    return httpRequest(authUrl, integrationApiKey, `${BASE_ENDPOINT_PATH}/saml_idp_metadata/go_live/${orgId}`, \"POST\").then(\n        (httpResponse) => {\n            if (httpResponse.statusCode === 401) {\n                throw new Error(\"integrationApiKey is incorrect\")\n            } else if (httpResponse.statusCode === 429) {\n                throw new RateLimitedException(httpResponse.response)\n            } else if (httpResponse.statusCode === 404) {\n                return false\n            } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n                throw new Error(\"Unknown error when setting orgs SAML connection to go live\")\n            }\n\n            return true\n        }\n    )\n}\n\n// PUT/PATCH\nexport type UpdateOrgRequest = {\n    orgId: string\n    name?: string\n    canSetupSaml?: boolean\n    maxUsers?: number\n    metadata?: { [key: string]: any }\n    canJoinOnEmailDomainMatch?: boolean // In the backend, this is the `domain_autojoin` argument.\n    membersMustHaveEmailDomainMatch?: boolean // In the backend, this is the `domain_restrict` argument.\n    domain?: string\n    legacyOrgId?: string\n    require2faBy?: string\n    extraDomains?: string[]\n}\n\nexport function updateOrg(\n    authUrl: URL,\n    integrationApiKey: string,\n    updateOrgRequest: UpdateOrgRequest\n): Promise<boolean> {\n    if (!isValidId(updateOrgRequest.orgId)) {\n        return Promise.resolve(false)\n    }\n\n    const request = {\n        name: updateOrgRequest.name,\n        can_setup_saml: updateOrgRequest.canSetupSaml,\n        metadata: updateOrgRequest.metadata,\n        max_users: updateOrgRequest.maxUsers,\n        autojoin_by_domain: updateOrgRequest.canJoinOnEmailDomainMatch,\n        restrict_to_domain: updateOrgRequest.membersMustHaveEmailDomainMatch,\n        domain: updateOrgRequest.domain,\n        legacy_org_id: updateOrgRequest.legacyOrgId,\n        require_2fa_by: updateOrgRequest.require2faBy,\n        extra_domains: updateOrgRequest.extraDomains,\n    }\n    return httpRequest(\n        authUrl,\n        integrationApiKey,\n        `${ORG_ENDPOINT_PATH}/${updateOrgRequest.orgId}`,\n        \"PUT\",\n        JSON.stringify(request)\n    ).then((httpResponse) => {\n        if (httpResponse.statusCode === 401) {\n            throw new Error(\"integrationApiKey is incorrect\")\n        } else if (httpResponse.statusCode === 429) {\n            throw new RateLimitedException(httpResponse.response)\n        } else if (httpResponse.statusCode === 400) {\n            throw new UpdateOrgException(httpResponse.response)\n        } else if (httpResponse.statusCode === 404) {\n            return false\n        } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n            throw new Error(\"Unknown error when updating org\")\n        }\n\n        return true\n    })\n}\n\nexport function subscribeOrgToRoleMapping(\n    authUrl: URL,\n    integrationApiKey: string,\n    orgId: string,\n    customRoleMappingName: string\n): Promise<boolean> {\n    if (!isValidId(orgId)) {\n        return Promise.resolve(false)\n    }\n\n    const request = {\n        custom_role_mapping_name: customRoleMappingName,\n    }\n    return httpRequest(authUrl, integrationApiKey, `${ORG_ENDPOINT_PATH}/${orgId}`, \"PUT\", JSON.stringify(request)).then(\n        (httpResponse) => {\n            if (httpResponse.statusCode === 401) {\n                throw new Error(\"integrationApiKey is incorrect\")\n            } else if (httpResponse.statusCode === 429) {\n                throw new RateLimitedException(httpResponse.response)\n            } else if (httpResponse.statusCode === 400) {\n                throw new UpdateOrgException(httpResponse.response)\n            } else if (httpResponse.statusCode === 404) {\n                return false\n            } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n                throw new Error(\"Unknown error when subscribing an org to a role mapping\")\n            }\n\n            return true\n        }\n    )\n}\n\n// DELETE\nexport function deleteOrg(authUrl: URL, integrationApiKey: string, orgId: string): Promise<boolean> {\n    if (!isValidId(orgId)) {\n        return Promise.resolve(false)\n    }\n\n    return httpRequest(authUrl, integrationApiKey, `${ORG_ENDPOINT_PATH}/${orgId}`, \"DELETE\").then((httpResponse) => {\n        if (httpResponse.statusCode === 401) {\n            throw new Error(\"integrationApiKey is incorrect\")\n        } else if (httpResponse.statusCode === 429) {\n            throw new RateLimitedException(httpResponse.response)\n        } else if (httpResponse.statusCode === 404) {\n            return false\n        } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n            throw new Error(\"Unknown error when deleting org\")\n        }\n\n        return true\n    })\n}\n\nexport type RevokePendingOrgInviteRequest = {\n    inviteeEmail: string\n    orgId: string\n}\n\nexport function revokePendingOrgInvite(\n    authUrl: URL,\n    integrationApiKey: string,\n    revokePendingOrgInviteRequest: RevokePendingOrgInviteRequest\n): Promise<boolean> {\n    const request = {\n        invitee_email: revokePendingOrgInviteRequest.inviteeEmail,\n        org_id: revokePendingOrgInviteRequest.orgId,\n    }\n    return httpRequest(\n        authUrl,\n        integrationApiKey,\n        `/api/backend/v1/pending_org_invites`,\n        \"DELETE\",\n        JSON.stringify(request)\n    ).then((httpResponse) => {\n        if (httpResponse.statusCode === 401) {\n            throw new Error(\"integrationApiKey is incorrect\")\n        } else if (httpResponse.statusCode === 429) {\n            throw new RateLimitedException(httpResponse.response)\n        } else if (httpResponse.statusCode === 400) {\n            throw new RevokePendingOrgInviteException(httpResponse.response)\n        } else if (httpResponse.statusCode === 404) {\n            return false\n        } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n            throw new Error(\"Unknown error when revoking org invite\")\n        }\n\n        return true\n    })\n}\n\nexport function deleteSamlConnection(\n    authUrl: URL,\n    integrationApiKey: string,\n    orgId: string\n): Promise<boolean> {\n    if (!isValidId(orgId)) {\n        return Promise.resolve(false)\n    }\n\n    return httpRequest(\n        authUrl,\n        integrationApiKey,\n        `${BASE_ENDPOINT_PATH}/saml_idp_metadata/${orgId}`,\n        \"DELETE\"\n    ).then((httpResponse) => {\n        if (httpResponse.statusCode === 401) {\n            throw new Error(\"integrationApiKey is incorrect\")\n        } else if (httpResponse.statusCode === 429) {\n            throw new RateLimitedException(httpResponse.response)\n        } else if (httpResponse.statusCode === 400) {\n            throw new RevokePendingOrgInviteException(httpResponse.response)\n        } else if (httpResponse.statusCode === 404) {\n            return false\n        } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n            throw new Error(\"Unknown error when deleting SAML connection\")\n        }\n\n        return true\n    })\n}\n","import { RateLimitedException } from \"../exceptions\"\nimport { httpRequest } from \"../http\"\n\nexport type TokenVerificationMetadata = {\n    verifierKey: string\n    issuer: string\n}\n\nconst ENDPOINT_PATH = \"/api/v1/token_verification_metadata\"\n\n// GET\nexport function fetchTokenVerificationMetadata(\n    authUrl: URL,\n    integrationApiKey: string,\n    manualTokenVerificationMetadata?: TokenVerificationMetadata\n): Promise<TokenVerificationMetadata> {\n    if (manualTokenVerificationMetadata) {\n        return Promise.resolve(manualTokenVerificationMetadata)\n    }\n\n    return httpRequest(authUrl, integrationApiKey, ENDPOINT_PATH, \"GET\").then((httpResponse) => {\n        if (httpResponse.statusCode === 401) {\n            console.error(\"Your API key is incorrect\")\n            throw new Error(\"integrationApiKey is incorrect\")\n        } else if (httpResponse.statusCode === 429) {\n            throw new RateLimitedException(httpResponse.response)\n        } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n            console.error(`Error fetching token verification metadata: ${httpResponse.statusCode}`)\n            throw new Error(\"Unknown error when fetching token verification metadata\")\n        }\n\n        const jsonParse = JSON.parse(httpResponse.response)\n        return {\n            verifierKey: jsonParse.verifier_key_pem,\n            issuer: formatIssuer(authUrl),\n        }\n    })\n}\n\nfunction formatIssuer(authUrl: URL): string {\n    return authUrl.origin\n}\n","import {\n    BadRequestException,\n    CreateUserException,\n    RateLimitedException,\n    UpdateUserEmailException,\n    UpdateUserMetadataException,\n    UpdateUserPasswordException,\n} from \"../exceptions\"\nimport { httpRequest } from \"../http\"\nimport { CreatedUser, UserMetadata } from \"../user\"\nimport { formatQueryParameters, isValidId, parseSnakeCaseToCamelCase } from \"../utils\"\n\nconst ENDPOINT_PATH = \"/api/backend/v1/user\"\n\nexport type UsersQuery = {\n    pageSize?: number\n    pageNumber?: number\n    orderBy?: \"CREATED_AT_ASC\" | \"CREATED_AT_DESC\" | \"LAST_ACTIVE_AT_ASC\" | \"LAST_ACTIVE_AT_DESC\" | \"EMAIL\" | \"USERNAME\"\n    emailOrUsername?: string\n    includeOrgs?: boolean\n    legacyUserId?: string\n}\n\nexport type UsersPagedResponse = {\n    users: UserMetadata[]\n    totalUsers: number\n    currentPage: number\n    pageSize: number\n    hasMoreResults: boolean\n}\n\nexport type UserInOrgMetadata = UserMetadata & {\n    roleInOrg: string\n    additionalRolesInOrg: string[]\n}\n\nexport type UsersInOrgPagedResponse = {\n    users: UserInOrgMetadata[]\n    totalUsers: number\n    currentPage: number\n    pageSize: number\n    hasMoreResults: boolean\n}\n\nexport type UsersInOrgQuery = {\n    orgId: string\n    pageSize?: number\n    pageNumber?: number\n    includeOrgs?: boolean\n    role?: string\n}\n\n// GET\nexport function fetchUserMetadataByQuery(\n    authUrl: URL,\n    integrationApiKey: string,\n    pathParam: string,\n    query: any\n): Promise<UserMetadata | null> {\n    const queryString = formatQueryParameters(query)\n    return httpRequest(authUrl, integrationApiKey, `${ENDPOINT_PATH}/${pathParam}?${queryString}`, \"GET\").then(\n        (httpResponse) => {\n            if (httpResponse.statusCode === 401) {\n                throw new Error(\"integrationApiKey is incorrect\")\n            } else if (httpResponse.statusCode === 429) {\n                throw new RateLimitedException(httpResponse.response)\n            } else if (httpResponse.statusCode === 404) {\n                return null\n            } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n                throw new Error(\"Unknown error when fetching user metadata\")\n            }\n\n            return parseSnakeCaseToCamelCase(httpResponse.response)\n        }\n    )\n}\n\nexport function fetchUserMetadataByUserIdWithIdCheck(\n    authUrl: URL,\n    integrationApiKey: string,\n    userId: string,\n    includeOrgs?: boolean\n): Promise<UserMetadata | null> {\n    if (isValidId(userId)) {\n        return fetchUserMetadataByQuery(authUrl, integrationApiKey, userId, { include_orgs: includeOrgs || false })\n    } else {\n        return Promise.resolve(null)\n    }\n}\n\nexport function fetchUsersByQuery(\n    authUrl: URL,\n    integrationApiKey: string,\n    query: UsersQuery\n): Promise<UsersPagedResponse> {\n    const queryParams = {\n        page_size: query.pageSize,\n        page_number: query.pageNumber,\n        order_by: query.orderBy,\n        email_or_username: query.emailOrUsername,\n        include_orgs: query.includeOrgs,\n        legacy_user_id: query.legacyUserId,\n    }\n    const q = formatQueryParameters(queryParams)\n    return httpRequest(authUrl, integrationApiKey, `${ENDPOINT_PATH}/query?${q}`, \"GET\").then((httpResponse) => {\n        if (httpResponse.statusCode === 401) {\n            throw new Error(\"integrationApiKey is incorrect\")\n        } else if (httpResponse.statusCode === 429) {\n            throw new RateLimitedException(httpResponse.response)\n        } else if (httpResponse.statusCode === 400) {\n            throw new Error(\"Invalid query \" + httpResponse.response)\n        } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n            throw new Error(\"Unknown error when fetching users by query\")\n        }\n\n        return parseSnakeCaseToCamelCase(httpResponse.response)\n    })\n}\n\nexport function fetchUsersInOrg(\n    authUrl: URL,\n    integrationApiKey: string,\n    query: UsersInOrgQuery\n): Promise<UsersInOrgPagedResponse> {\n    if (!isValidId(query.orgId)) {\n        const emptyResponse: UsersInOrgPagedResponse = {\n            users: [],\n            totalUsers: 0,\n            currentPage: query.pageNumber || 0,\n            pageSize: query.pageSize || 10,\n            hasMoreResults: false,\n        }\n        return Promise.resolve(emptyResponse)\n    }\n\n    const queryParams = {\n        page_size: query.pageSize,\n        page_number: query.pageNumber,\n        include_orgs: query.includeOrgs,\n        role: query.role,\n    }\n    const queryString = formatQueryParameters(queryParams)\n    return httpRequest(authUrl, integrationApiKey, `${ENDPOINT_PATH}/org/${query.orgId}?${queryString}`, \"GET\").then(\n        (httpResponse) => {\n            if (httpResponse.statusCode === 401) {\n                throw new Error(\"integrationApiKey is incorrect\")\n            } else if (httpResponse.statusCode === 429) {\n                throw new RateLimitedException(httpResponse.response)\n            } else if (httpResponse.statusCode === 400) {\n                throw new Error(\"Invalid query \" + httpResponse.response)\n            } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n                throw new Error(\"Unknown error when fetching users in org\")\n            }\n\n            return parseSnakeCaseToCamelCase(httpResponse.response)\n        }\n    )\n}\n\n// POST\nexport function fetchBatchUserMetadata(\n    authUrl: URL,\n    integrationApiKey: string,\n    type: string,\n    values: string[],\n    keyFunction: (x: UserMetadata) => string,\n    includeOrgs?: boolean\n): Promise<{ [key: string]: UserMetadata }> {\n    const queryString = includeOrgs ? formatQueryParameters({ include_orgs: includeOrgs }) : \"\"\n    const jsonBody = { [type]: values }\n    return httpRequest(\n        authUrl,\n        integrationApiKey,\n        `${ENDPOINT_PATH}/${type}?${queryString}`,\n        \"POST\",\n        JSON.stringify(jsonBody)\n    ).then((httpResponse) => {\n        if (httpResponse.statusCode === 401) {\n            throw new Error(\"integrationApiKey is incorrect\")\n        } else if (httpResponse.statusCode === 429) {\n            throw new RateLimitedException(httpResponse.response)\n        } else if (httpResponse.statusCode === 400) {\n            throw new Error(\"Bad request \" + httpResponse.response)\n        } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n            throw new Error(\"Unknown error when fetching batch user metadata\")\n        }\n\n        const userMetadatas = parseSnakeCaseToCamelCase(httpResponse.response)\n\n        const returnValue: { [key: string]: UserMetadata } = {}\n        for (let userMetadata of userMetadatas) {\n            returnValue[keyFunction(userMetadata)] = userMetadata\n        }\n        return returnValue\n    })\n}\n\nexport type CreateUserRequest = {\n    email: string\n    emailConfirmed?: boolean\n    sendEmailToConfirmEmailAddress?: boolean\n\n    password?: string\n    askUserToUpdatePasswordOnLogin?: boolean\n    ignoreDomainRestrictions?: boolean\n\n    username?: string\n    firstName?: string\n    lastName?: string\n    properties?: { [key: string]: any }\n}\n\nexport function createUser(\n    authUrl: URL,\n    integrationApiKey: string,\n    createUserRequest: CreateUserRequest\n): Promise<CreatedUser> {\n    const request = {\n        email: createUserRequest.email,\n        email_confirmed: createUserRequest.emailConfirmed,\n        send_email_to_confirm_email_address: createUserRequest.sendEmailToConfirmEmailAddress,\n\n        password: createUserRequest.password,\n        ask_user_to_update_password_on_login: createUserRequest.askUserToUpdatePasswordOnLogin,\n        ignore_domain_restrictions: createUserRequest.ignoreDomainRestrictions,\n\n        username: createUserRequest.username,\n        first_name: createUserRequest.firstName,\n        last_name: createUserRequest.lastName,\n        properties: createUserRequest.properties,\n    }\n    return httpRequest(authUrl, integrationApiKey, `${ENDPOINT_PATH}/`, \"POST\", JSON.stringify(request)).then(\n        (httpResponse) => {\n            if (httpResponse.statusCode === 401) {\n                throw new Error(\"integrationApiKey is incorrect\")\n            } else if (httpResponse.statusCode === 429) {\n                throw new RateLimitedException(httpResponse.response)\n            } else if (httpResponse.statusCode === 400) {\n                throw new CreateUserException(httpResponse.response)\n            } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n                throw new Error(\"Unknown error when creating user\")\n            }\n\n            return parseSnakeCaseToCamelCase(httpResponse.response)\n        }\n    )\n}\n\nexport function disableUser(authUrl: URL, integrationApiKey: string, userId: string): Promise<boolean> {\n    if (!isValidId(userId)) {\n        return Promise.resolve(false)\n    }\n\n    return httpRequest(authUrl, integrationApiKey, `${ENDPOINT_PATH}/${userId}/disable`, \"POST\").then(\n        (httpResponse) => {\n            if (httpResponse.statusCode === 401) {\n                throw new Error(\"integrationApiKey is incorrect\")\n            } else if (httpResponse.statusCode === 429) {\n                throw new RateLimitedException(httpResponse.response)\n            } else if (httpResponse.statusCode === 404) {\n                return false\n            } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n                throw new Error(\"Unknown error when disabling user\")\n            }\n\n            return true\n        }\n    )\n}\n\nexport function enableUser(authUrl: URL, integrationApiKey: string, userId: string): Promise<boolean> {\n    if (!isValidId(userId)) {\n        return Promise.resolve(false)\n    }\n\n    return httpRequest(authUrl, integrationApiKey, `${ENDPOINT_PATH}/${userId}/enable`, \"POST\").then((httpResponse) => {\n        if (httpResponse.statusCode === 401) {\n            throw new Error(\"integrationApiKey is incorrect\")\n        } else if (httpResponse.statusCode === 429) {\n            throw new RateLimitedException(httpResponse.response)\n        } else if (httpResponse.statusCode === 404) {\n            return false\n        } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n            throw new Error(\"Unknown error when enabling user\")\n        }\n\n        return true\n    })\n}\n\nexport function disableUser2fa(authUrl: URL, integrationApiKey: string, userId: string): Promise<boolean> {\n    if (!isValidId(userId)) {\n        return Promise.resolve(false)\n    }\n\n    return httpRequest(authUrl, integrationApiKey, `${ENDPOINT_PATH}/${userId}/disable_2fa`, \"POST\").then(\n        (httpResponse) => {\n            if (httpResponse.statusCode === 401) {\n                throw new Error(\"integrationApiKey is incorrect\")\n            } else if (httpResponse.statusCode === 429) {\n                throw new RateLimitedException(httpResponse.response)\n            } else if (httpResponse.statusCode === 404) {\n                return false\n            } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n                throw new Error(\"Unknown error when disabling 2FA\")\n            }\n\n            return true\n        }\n    )\n}\n\nexport function resendEmailConfirmation(authUrl: URL, integrationApiKey: string, userId: string): Promise<boolean> {\n    if (!isValidId(userId)) {\n        return Promise.resolve(false)\n    }\n\n    const request = {\n        user_id: userId,\n    }\n\n    return httpRequest(\n        authUrl,\n        integrationApiKey,\n        \"/api/backend/v1/resend_email_confirmation\",\n        \"POST\",\n        JSON.stringify(request)\n    ).then((httpResponse) => {\n        if (httpResponse.statusCode === 401) {\n            throw new Error(\"integrationApiKey is incorrect\")\n        } else if (httpResponse.statusCode === 404) {\n            return false\n        } else if (httpResponse.statusCode === 429) {\n            let errorMessage: string\n            try {\n                errorMessage = JSON.parse(httpResponse.response).user_facing_error\n            } catch (SyntaxError) {\n                errorMessage = httpResponse.response\n            }\n            throw new RateLimitedException(errorMessage)\n        } else if (httpResponse.statusCode === 400) {\n            throw new BadRequestException(httpResponse.response)\n        } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n            throw new Error(\"Unknown error when resending email confirmation\")\n        }\n\n        return true\n    })\n}\n\nexport type InviteUserToOrgRequest = {\n    orgId: string\n    email: string\n    role: string\n    additionalRoles?: string[]\n}\n\nexport function inviteUserToOrg(\n    authUrl: URL,\n    integrationApiKey: string,\n    inviteUserToOrgRequest: InviteUserToOrgRequest\n): Promise<boolean> {\n    const body = {\n        org_id: inviteUserToOrgRequest.orgId,\n        email: inviteUserToOrgRequest.email,\n        role: inviteUserToOrgRequest.role,\n        additional_roles: inviteUserToOrgRequest.additionalRoles ?? [],\n    }\n\n    return httpRequest(authUrl, integrationApiKey, `/api/backend/v1/invite_user`, \"POST\", JSON.stringify(body)).then(\n        (httpResponse) => {\n            if (httpResponse.statusCode === 401) {\n                throw new Error(\"integrationApiKey is incorrect\")\n            } else if (httpResponse.statusCode === 429) {\n                throw new RateLimitedException(httpResponse.response)\n            } else if (httpResponse.statusCode === 400) {\n                throw new BadRequestException(httpResponse.response)\n            } else if (httpResponse.statusCode === 404) {\n                return false\n            } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n                throw new Error(\"Unknown error when inviting a user to the org\")\n            }\n\n            return true\n        }\n    )\n}\n\nexport function logoutAllUserSessions(authUrl: URL, integrationApiKey: string, userId: string): Promise<boolean> {\n    if (!isValidId(userId)) {\n        return Promise.resolve(false)\n    }\n\n    return httpRequest(authUrl, integrationApiKey, `${ENDPOINT_PATH}/${userId}/logout_all_sessions`, \"POST\").then(\n        (httpResponse) => {\n            if (httpResponse.statusCode === 401) {\n                throw new Error(\"integrationApiKey is incorrect\")\n            } else if (httpResponse.statusCode === 429) {\n                throw new RateLimitedException(httpResponse.response)\n            } else if (httpResponse.statusCode === 404) {\n                return false\n            } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n                throw new Error(\"Unknown error when logging out all sessions\")\n            }\n\n            return true\n        }\n    )\n}\n\n// PUT/PATCH\nexport type UpdateUserMetadataRequest = {\n    username?: string\n    firstName?: string\n    lastName?: string\n    pictureUrl?: string\n    metadata?: { [key: string]: any }\n    properties?: { [key: string]: any }\n    updatePasswordRequired?: boolean\n    legacyUserId?: string\n}\nexport function updateUserMetadata(\n    authUrl: URL,\n    integrationApiKey: string,\n    userId: string,\n    updateUserMetadataRequest: UpdateUserMetadataRequest\n): Promise<boolean> {\n    if (!isValidId(userId)) {\n        return Promise.resolve(false)\n    }\n\n    const request = {\n        username: updateUserMetadataRequest.username,\n        first_name: updateUserMetadataRequest.firstName,\n        last_name: updateUserMetadataRequest.lastName,\n        picture_url: updateUserMetadataRequest.pictureUrl,\n        metadata: updateUserMetadataRequest.metadata,\n        properties: updateUserMetadataRequest.properties,\n        update_password_required: updateUserMetadataRequest.updatePasswordRequired,\n        legacy_user_id: updateUserMetadataRequest.legacyUserId,\n    }\n    return httpRequest(authUrl, integrationApiKey, `${ENDPOINT_PATH}/${userId}`, \"PUT\", JSON.stringify(request)).then(\n        (httpResponse) => {\n            if (httpResponse.statusCode === 401) {\n                throw new Error(\"integrationApiKey is incorrect\")\n            } else if (httpResponse.statusCode === 429) {\n                throw new RateLimitedException(httpResponse.response)\n            } else if (httpResponse.statusCode === 400) {\n                throw new UpdateUserMetadataException(httpResponse.response)\n            } else if (httpResponse.statusCode === 404) {\n                return false\n            } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n                throw new Error(\"Unknown error when updating user metadata\")\n            }\n\n            return true\n        }\n    )\n}\n\nexport type UpdateUserEmailRequest = {\n    newEmail: string\n    requireEmailConfirmation: boolean\n}\n\nexport function updateUserEmail(\n    authUrl: URL,\n    integrationApiKey: string,\n    userId: string,\n    updateUserEmail: UpdateUserEmailRequest\n): Promise<boolean> {\n    if (!isValidId(userId)) {\n        return Promise.resolve(false)\n    }\n\n    const request = {\n        new_email: updateUserEmail.newEmail,\n        require_email_confirmation: updateUserEmail.requireEmailConfirmation,\n    }\n    return httpRequest(\n        authUrl,\n        integrationApiKey,\n        `${ENDPOINT_PATH}/${userId}/email`,\n        \"PUT\",\n        JSON.stringify(request)\n    ).then((httpResponse) => {\n        if (httpResponse.statusCode === 401) {\n            throw new Error(\"integrationApiKey is incorrect\")\n        } else if (httpResponse.statusCode === 429) {\n            throw new RateLimitedException(httpResponse.response)\n        } else if (httpResponse.statusCode === 400) {\n            throw new UpdateUserEmailException(httpResponse.response)\n        } else if (httpResponse.statusCode === 404) {\n            return false\n        } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n            throw new Error(\"Unknown error when creating user\")\n        }\n\n        return true\n    })\n}\n\nexport type UpdateUserPasswordRequest = {\n    password: string\n    askUserToUpdatePasswordOnLogin?: boolean\n}\n\nexport function updateUserPassword(\n    authUrl: URL,\n    integrationApiKey: string,\n    userId: string,\n    updateUserPasswordRequest: UpdateUserPasswordRequest\n): Promise<boolean> {\n    if (!isValidId(userId)) {\n        return Promise.resolve(false)\n    }\n\n    const request = {\n        password: updateUserPasswordRequest.password,\n        ask_user_to_update_password_on_login: updateUserPasswordRequest.askUserToUpdatePasswordOnLogin,\n    }\n    return httpRequest(\n        authUrl,\n        integrationApiKey,\n        `${ENDPOINT_PATH}/${userId}/password`,\n        \"PUT\",\n        JSON.stringify(request)\n    ).then((httpResponse) => {\n        if (httpResponse.statusCode === 401) {\n            throw new Error(\"integrationApiKey is incorrect\")\n        } else if (httpResponse.statusCode === 429) {\n            throw new RateLimitedException(httpResponse.response)\n        } else if (httpResponse.statusCode === 400) {\n            throw new UpdateUserPasswordException(httpResponse.response)\n        } else if (httpResponse.statusCode === 404) {\n            return false\n        } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n            throw new Error(\"Unknown error when updating password\")\n        }\n\n        return true\n    })\n}\n\nexport function enableUserCanCreateOrgs(authUrl: URL, integrationApiKey: string, userId: string): Promise<boolean> {\n    if (!isValidId(userId)) {\n        return Promise.resolve(false)\n    }\n\n    return httpRequest(authUrl, integrationApiKey, `${ENDPOINT_PATH}/${userId}/can_create_orgs/enable`, \"PUT\").then(\n        (httpResponse) => {\n            if (httpResponse.statusCode === 401) {\n                throw new Error(\"integrationApiKey is incorrect\")\n            } else if (httpResponse.statusCode === 429) {\n                throw new RateLimitedException(httpResponse.response)\n            } else if (httpResponse.statusCode === 404) {\n                return false\n            } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n                throw new Error(\"Unknown error when enabling canCreateOrgs\")\n            }\n\n            return true\n        }\n    )\n}\n\nexport function disableUserCanCreateOrgs(authUrl: URL, integrationApiKey: string, userId: string): Promise<boolean> {\n    if (!isValidId(userId)) {\n        return Promise.resolve(false)\n    }\n\n    return httpRequest(authUrl, integrationApiKey, `${ENDPOINT_PATH}/${userId}/can_create_orgs/disable`, \"PUT\").then(\n        (httpResponse) => {\n            if (httpResponse.statusCode === 401) {\n                throw new Error(\"integrationApiKey is incorrect\")\n            } else if (httpResponse.statusCode === 429) {\n                throw new RateLimitedException(httpResponse.response)\n            } else if (httpResponse.statusCode === 404) {\n                return false\n            } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n                throw new Error(\"Unknown error when disabling canCreateOrgs\")\n            }\n\n            return true\n        }\n    )\n}\n\nexport async function clearUserPassword(authUrl: URL, integrationApiKey: string, userId: string): Promise<boolean> {\n    if (!isValidId(userId)) {\n        return Promise.resolve(false)\n    }\n\n    const httpResponse = await httpRequest(\n        authUrl,\n        integrationApiKey,\n        `${ENDPOINT_PATH}/${userId}/clear_password`,\n        \"PUT\"\n    )\n    if (httpResponse.statusCode === 401) {\n        throw new Error(\"integrationApiKey is incorrect\")\n    } else if (httpResponse.statusCode === 429) {\n        throw new RateLimitedException(httpResponse.response)\n    } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n        throw new Error(\"Unknown error when clearing password\")\n    }\n    return true\n}\n\n// DELETE\nexport function deleteUser(authUrl: URL, integrationApiKey: string, userId: string): Promise<boolean> {\n    if (!isValidId(userId)) {\n        return Promise.resolve(false)\n    }\n\n    return httpRequest(authUrl, integrationApiKey, `${ENDPOINT_PATH}/${userId}`, \"DELETE\").then((httpResponse) => {\n        if (httpResponse.statusCode === 401) {\n            throw new Error(\"integrationApiKey is incorrect\")\n        } else if (httpResponse.statusCode === 429) {\n            throw new RateLimitedException(httpResponse.response)\n        } else if (httpResponse.statusCode === 404) {\n            return false\n        } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n            throw new Error(\"Unknown error when deleting user\")\n        }\n\n        return true\n    })\n}\n\nexport type UserSignupQueryParams = {\n    userSignupQueryParameters: { [key: string]: string }\n}\n\nexport async function fetchUserSignupQueryParams(\n    authUrl: URL,\n    integrationApiKey: string,\n    userId: string\n): Promise<UserSignupQueryParams | null> {\n    if (!isValidId(userId)) {\n        return Promise.resolve(null)\n    }\n\n    const httpResponse = await httpRequest(\n        authUrl,\n        integrationApiKey,\n        `${ENDPOINT_PATH}/${userId}/signup_query_parameters`,\n        \"GET\"\n    )\n    if (httpResponse.statusCode === 401) {\n        throw new Error(\"integrationApiKey is incorrect\")\n    } else if (httpResponse.statusCode === 429) {\n        throw new RateLimitedException(httpResponse.response)\n    } else if (httpResponse.statusCode === 404) {\n        return null\n    } else if (httpResponse.statusCode && httpResponse.statusCode >= 400) {\n        throw new Error(\"Unknown error when fetching user signup query params\")\n    }\n\n    const snakeCase = JSON.parse(httpResponse.response)\n    return { userSignupQueryParameters: snakeCase[\"user_signup_query_parameters\"] }\n}\n","import { validateApiKey } from \"./api/endUserApiKeys\"\nimport { ApiKeyValidateException } from \"./exceptions\"\nimport { OrgApiKeyValidation, PersonalApiKeyValidation } from \"./user\"\n\nexport async function validatePersonalApiKey(\n    authUrl: URL,\n    integrationApiKey: string,\n    apiKeyToken: string\n): Promise<PersonalApiKeyValidation> {\n    const apiKeyValidation = await validateApiKey(authUrl, integrationApiKey, apiKeyToken)\n    if (!apiKeyValidation.user || apiKeyValidation.org) {\n        throw new ApiKeyValidateException(JSON.stringify({ api_key_token: [\"Not a personal API Key\"] }))\n    }\n    return {\n        user: apiKeyValidation.user,\n        metadata: apiKeyValidation.metadata,\n    }\n}\n\nexport async function validateOrgApiKey(\n    authUrl: URL,\n    integrationApiKey: string,\n    apiKeyToken: string\n): Promise<OrgApiKeyValidation> {\n    const apiKeyValidation = await validateApiKey(authUrl, integrationApiKey, apiKeyToken)\n    if (!apiKeyValidation.org) {\n        throw new ApiKeyValidateException(JSON.stringify({ api_key_token: [\"Not an org API Key\"] }))\n    }\n    return {\n        org: apiKeyValidation.org,\n        metadata: apiKeyValidation.metadata,\n        user: apiKeyValidation.user,\n        userInOrg: apiKeyValidation.userInOrg,\n    }\n}\n","import { AccessToken, createAccessToken, CreateAccessTokenRequest } from \"./api/accessToken\"\nimport {\n    ApiKeysCreateRequest,\n    ApiKeysQueryRequest,\n    ApiKeyUpdateRequest,\n    createApiKey,\n    deleteApiKey,\n    fetchApiKey,\n    fetchArchivedApiKeys,\n    fetchCurrentApiKeys,\n    updateApiKey,\n    validateApiKey,\n} from \"./api/endUserApiKeys\"\nimport {\n    StepUpMfaVerifyTotpResponse,\n    VerifyTotpChallengeRequest,\n    verifyStepUpTotpChallenge,\n} from \"./api/mfa/verifyTotp\"\nimport { StepUpMfaVerifyGrantResponse, VerifyStepUpGrantRequest, verifyStepUpGrant } from \"./api/mfa/verifyGrant\"\nimport { createMagicLink, CreateMagicLinkRequest, MagicLink } from \"./api/magicLink\"\nimport {\n    migrateUserFromExternalSource,\n    MigrateUserFromExternalSourceRequest,\n    migrateUserPassword,\n    MigrateUserPasswordRequest,\n} from \"./api/migrateUser\"\nimport {\n    addUserToOrg,\n    AddUserToOrgRequest,\n    allowOrgToSetupSamlConnection,\n    changeUserRoleInOrg,\n    ChangeUserRoleInOrgRequest,\n    createOrg,\n    CreateOrgRequest,\n    createOrgSamlConnectionLink,\n    CreateSamlConnectionLinkResponse,\n    deleteOrg,\n    deleteSamlConnection,\n    disallowOrgToSetupSamlConnection,\n    fetchCustomRoleMappings,\n    fetchOrg,\n    fetchOrgByQuery,\n    fetchPendingInvites,\n    FetchPendingInvitesParams,\n    fetchSamlSpMetadata,\n    FetchSamlSpMetadataResponse,\n    OrgQuery,\n    OrgQueryResponse,\n    PendingInvitesPage,\n    removeUserFromOrg,\n    RemoveUserFromOrgRequest,\n    revokePendingOrgInvite,\n    RevokePendingOrgInviteRequest,\n    samlGoLive,\n    setSamlIdpMetadata,\n    SetSamlIdpMetadataRequest,\n    subscribeOrgToRoleMapping,\n    updateOrg,\n    UpdateOrgRequest,\n} from \"./api/org\"\nimport { fetchTokenVerificationMetadata, TokenVerificationMetadata } from \"./api/tokenVerificationMetadata\"\nimport {\n    clearUserPassword,\n    createUser,\n    CreateUserRequest,\n    deleteUser,\n    disableUser,\n    disableUser2fa,\n    disableUserCanCreateOrgs,\n    enableUser,\n    enableUserCanCreateOrgs,\n    fetchBatchUserMetadata,\n    fetchUserMetadataByQuery,\n    fetchUserMetadataByUserIdWithIdCheck,\n    fetchUsersByQuery,\n    fetchUserSignupQueryParams,\n    fetchUsersInOrg,\n    inviteUserToOrg,\n    InviteUserToOrgRequest,\n    logoutAllUserSessions,\n    resendEmailConfirmation,\n    updateUserEmail,\n    UpdateUserEmailRequest,\n    updateUserMetadata,\n    UpdateUserMetadataRequest,\n    updateUserPassword,\n    UpdateUserPasswordRequest,\n    UserSignupQueryParams,\n    UsersInOrgQuery,\n    UsersPagedResponse,\n    UsersInOrgPagedResponse,\n    UsersQuery,\n} from \"./api/user\"\nimport { CustomRoleMappings } from \"./customRoleMappings\"\nimport {\n    ApiKeyFull,\n    ApiKeyNew,\n    ApiKeyResultPage,\n    ApiKeyValidation,\n    CreatedOrg,\n    CreatedUser,\n    Organization,\n    OrgApiKeyValidation,\n    PersonalApiKeyValidation,\n    UserMetadata,\n} from \"./user\"\nimport { validateOrgApiKey, validatePersonalApiKey } from \"./validators\"\n\nexport function getApis(authUrl: URL, integrationApiKey: string) {\n    function fetchTokenVerificationMetadataWrapper(): Promise<TokenVerificationMetadata> {\n        return fetchTokenVerificationMetadata(authUrl, integrationApiKey)\n    }\n\n    function fetchUserMetadataByUserId(userId: string, includeOrgs?: boolean): Promise<UserMetadata | null> {\n        return fetchUserMetadataByUserIdWithIdCheck(authUrl, integrationApiKey, userId, includeOrgs)\n    }\n\n    function fetchUserMetadataByEmail(email: string, includeOrgs?: boolean): Promise<UserMetadata | null> {\n        return fetchUserMetadataByQuery(authUrl, integrationApiKey, \"email\", {\n            email: email,\n            include_orgs: includeOrgs || false,\n        })\n    }\n\n    function fetchUserMetadataByUsername(username: string, includeOrgs?: boolean): Promise<UserMetadata | null> {\n        return fetchUserMetadataByQuery(authUrl, integrationApiKey, \"username\", {\n            username: username,\n            include_orgs: includeOrgs || false,\n        })\n    }\n\n    function fetchBatchUserMetadataByUserIds(\n        userIds: string[],\n        includeOrgs?: boolean\n    ): Promise<{ [userId: string]: UserMetadata }> {\n        return fetchBatchUserMetadata(\n            authUrl,\n            integrationApiKey,\n            \"user_ids\",\n            userIds,\n            (x) => x.userId,\n            includeOrgs || false\n        )\n    }\n\n    function fetchBatchUserMetadataByEmails(\n        emails: string[],\n        includeOrgs?: boolean\n    ): Promise<{ [email: string]: UserMetadata }> {\n        return fetchBatchUserMetadata(\n            authUrl,\n            integrationApiKey,\n            \"emails\",\n            emails,\n            (x) => x.email,\n            includeOrgs || false\n        )\n    }\n\n    function fetchBatchUserMetadataByUsernames(\n        usernames: string[],\n        includeOrgs?: boolean\n    ): Promise<{ [username: string]: UserMetadata }> {\n        return fetchBatchUserMetadata(\n            authUrl,\n            integrationApiKey,\n            \"usernames\",\n            usernames,\n            (x) => x.username || \"\",\n            includeOrgs || false\n        )\n    }\n\n    function fetchOrgWrapper(orgId: string): Promise<Organization | null> {\n        return fetchOrg(authUrl, integrationApiKey, orgId)\n    }\n\n    function fetchOrgsByQueryWrapper(orgQuery: OrgQuery): Promise<OrgQueryResponse> {\n        return fetchOrgByQuery(authUrl, integrationApiKey, orgQuery)\n    }\n\n    function fetchCustomRoleMappingsWrapper(): Promise<CustomRoleMappings> {\n        return fetchCustomRoleMappings(authUrl, integrationApiKey)\n    }\n\n    function fetchUsersByQueryWrapper(usersQuery: UsersQuery): Promise<UsersPagedResponse> {\n        return fetchUsersByQuery(authUrl, integrationApiKey, usersQuery)\n    }\n\n    function fetchUsersInOrgWrapper(usersInOrgQuery: UsersInOrgQuery): Promise<UsersInOrgPagedResponse> {\n        return fetchUsersInOrg(authUrl, integrationApiKey, usersInOrgQuery)\n    }\n\n    function fetchUserSignupQueryParamsWrapper(userId: string): Promise<UserSignupQueryParams | null> {\n        return fetchUserSignupQueryParams(authUrl, integrationApiKey, userId)\n    }\n\n    function createUserWrapper(createUserRequest: CreateUserRequest): Promise<CreatedUser> {\n        return createUser(authUrl, integrationApiKey, createUserRequest)\n    }\n\n    function clearUserPasswordWrapper(userId: string): Promise<boolean> {\n        return clearUserPassword(authUrl, integrationApiKey, userId)\n    }\n\n    function updateUserMetadataWrapper(\n        userId: string,\n        updateUserMetadataRequest: UpdateUserMetadataRequest\n    ): Promise<boolean> {\n        return updateUserMetadata(authUrl, integrationApiKey, userId, updateUserMetadataRequest)\n    }\n\n    function deleteUserWrapper(userId: string): Promise<boolean> {\n        return deleteUser(authUrl, integrationApiKey, userId)\n    }\n\n    function disableUserWrapper(userId: string): Promise<boolean> {\n        return disableUser(authUrl, integrationApiKey, userId)\n    }\n\n    function enableUserWrapper(userId: string): Promise<boolean> {\n        return enableUser(authUrl, integrationApiKey, userId)\n    }\n\n    function disableUser2faWrapper(userId: string): Promise<boolean> {\n        return disableUser2fa(authUrl, integrationApiKey, userId)\n    }\n\n    function resendEmailConfirmationWrapper(userId: string): Promise<boolean> {\n        return resendEmailConfirmation(authUrl, integrationApiKey, userId)\n    }\n\n    function updateUserEmailWrapper(userId: string, updateUserEmailRequest: UpdateUserEmailRequest): Promise<boolean> {\n        return updateUserEmail(authUrl, integrationApiKey, userId, updateUserEmailRequest)\n    }\n\n    function updateUserPasswordWrapper(\n        userId: string,\n        updateUserPasswordRequest: UpdateUserPasswordRequest\n    ): Promise<boolean> {\n        return updateUserPassword(authUrl, integrationApiKey, userId, updateUserPasswordRequest)\n    }\n\n    function enableUserCanCreateOrgsWrapper(userId: string): Promise<boolean> {\n        return enableUserCanCreateOrgs(authUrl, integrationApiKey, userId)\n    }\n\n    function disableUserCanCreateOrgsWrapper(userId: string): Promise<boolean> {\n        return disableUserCanCreateOrgs(authUrl, integrationApiKey, userId)\n    }\n\n    function createMagicLinkWrapper(createMagicLinkRequest: CreateMagicLinkRequest): Promise<MagicLink> {\n        return createMagicLink(authUrl, integrationApiKey, createMagicLinkRequest)\n    }\n\n    function createAccessTokenWrapper(createAccessTokenRequest: CreateAccessTokenRequest): Promise<AccessToken> {\n        return createAccessToken(authUrl, integrationApiKey, createAccessTokenRequest)\n    }\n\n    function migrateUserFromExternalSourceWrapper(\n        migrateUserFromExternalSourceRequest: MigrateUserFromExternalSourceRequest\n    ): Promise<CreatedUser> {\n        return migrateUserFromExternalSource(authUrl, integrationApiKey, migrateUserFromExternalSourceRequest)\n    }\n\n    function migrateUserPasswordWrapper(migrateUserPasswordRequest: MigrateUserPasswordRequest): Promise<boolean> {\n        return migrateUserPassword(authUrl, integrationApiKey, migrateUserPasswordRequest)\n    }\n\n    function createOrgWrapper(createOrgRequest: CreateOrgRequest): Promise<CreatedOrg> {\n        return createOrg(authUrl, integrationApiKey, createOrgRequest)\n    }\n\n    function addUserToOrgWrapper(addUserToOrgRequest: AddUserToOrgRequest): Promise<boolean> {\n        return addUserToOrg(authUrl, integrationApiKey, addUserToOrgRequest)\n    }\n\n    function changeUserRoleInOrgWrapper(changeUserRoleInOrgRequest: ChangeUserRoleInOrgRequest): Promise<boolean> {\n        return changeUserRoleInOrg(authUrl, integrationApiKey, changeUserRoleInOrgRequest)\n    }\n\n    function removeUserFromOrgWrapper(removeUserFromOrgRequest: RemoveUserFromOrgRequest): Promise<boolean> {\n        return removeUserFromOrg(authUrl, integrationApiKey, removeUserFromOrgRequest)\n    }\n\n    function updateOrgWrapper(updateOrgRequest: UpdateOrgRequest): Promise<boolean> {\n        return updateOrg(authUrl, integrationApiKey, updateOrgRequest)\n    }\n\n    function subscribeOrgToRoleMappingWrapper(orgId: string, customRoleMappingName: string): Promise<boolean> {\n        return subscribeOrgToRoleMapping(authUrl, integrationApiKey, orgId, customRoleMappingName)\n    }\n\n    function deleteOrgWrapper(orgId: string): Promise<boolean> {\n        return deleteOrg(authUrl, integrationApiKey, orgId)\n    }\n\n    function allowOrgToSetupSamlConnectionWrapper(orgId: string): Promise<boolean> {\n        return allowOrgToSetupSamlConnection(authUrl, integrationApiKey, orgId)\n    }\n\n    function disallowOrgToSetupSamlConnectionWrapper(orgId: string): Promise<boolean> {\n        return disallowOrgToSetupSamlConnection(authUrl, integrationApiKey, orgId)\n    }\n\n    function createOrgSamlConnectionLinkWrapper(\n        orgId: string,\n        expiresInSeconds?: number\n    ): Promise<CreateSamlConnectionLinkResponse> {\n        return createOrgSamlConnectionLink(authUrl, integrationApiKey, orgId, expiresInSeconds)\n    }\n\n    function fetchSamlSpMetadataWrapper(orgId: string): Promise<FetchSamlSpMetadataResponse> {\n        return fetchSamlSpMetadata(authUrl, integrationApiKey, orgId)\n    }\n\n    function setSamlIdpMetadataWrapper(orgId: string, samlIdpMetadata: SetSamlIdpMetadataRequest): Promise<boolean> {\n        return setSamlIdpMetadata(authUrl, integrationApiKey, orgId, samlIdpMetadata)\n    }\n\n    function samlGoLiveWrapper(orgId: string): Promise<boolean> {\n        return samlGoLive(authUrl, integrationApiKey, orgId)\n    }\n\n    function deleteSamlConnectionWrapper(orgId: string): Promise<boolean> {\n        return deleteSamlConnection(authUrl, integrationApiKey, orgId)\n    }\n\n    function inviteUserToOrgWrapper(inviteUserToOrgRequest: InviteUserToOrgRequest): Promise<boolean> {\n        return inviteUserToOrg(authUrl, integrationApiKey, inviteUserToOrgRequest)\n    }\n\n    function logoutAllUserSessionsWrapper(userId: string): Promise<boolean> {\n        return logoutAllUserSessions(authUrl, integrationApiKey, userId)\n    }\n\n    function fetchPendingInvitesWrapper(params?: FetchPendingInvitesParams): Promise<PendingInvitesPage> {\n        return fetchPendingInvites(authUrl, integrationApiKey, params)\n    }\n\n    function revokePendingOrgInviteWrapper(\n        revokePendingOrgInviteRequest: RevokePendingOrgInviteRequest\n    ): Promise<boolean> {\n        return revokePendingOrgInvite(authUrl, integrationApiKey, revokePendingOrgInviteRequest)\n    }\n\n    // end user api key wrappers\n    function fetchApiKeyWrapper(apiKeyId: string): Promise<ApiKeyFull> {\n        return fetchApiKey(authUrl, integrationApiKey, apiKeyId)\n    }\n\n    function fetchCurrentApiKeysWrapper(apiKeyQuery: ApiKeysQueryRequest): Promise<ApiKeyResultPage> {\n        return fetchCurrentApiKeys(authUrl, integrationApiKey, apiKeyQuery)\n    }\n\n    function fetchArchivedApiKeysWrapper(apiKeyQuery: ApiKeysQueryRequest): Promise<ApiKeyResultPage> {\n        return fetchArchivedApiKeys(authUrl, integrationApiKey, apiKeyQuery)\n    }\n\n    function createApiKeyWrapper(apiKeyCreate: ApiKeysCreateRequest): Promise<ApiKeyNew> {\n        return createApiKey(authUrl, integrationApiKey, apiKeyCreate)\n    }\n\n    function updateApiKeyWrapper(apiKeyId: string, ApiKeyUpdate: ApiKeyUpdateRequest): Promise<boolean> {\n        return updateApiKey(authUrl, integrationApiKey, apiKeyId, ApiKeyUpdate)\n    }\n\n    function deleteApiKeyWrapper(apiKeyId: string): Promise<boolean> {\n        return deleteApiKey(authUrl, integrationApiKey, apiKeyId)\n    }\n\n    function validatePersonalApiKeyWrapper(apiKeyToken: string): Promise<PersonalApiKeyValidation> {\n        return validatePersonalApiKey(authUrl, integrationApiKey, apiKeyToken)\n    }\n\n    function validateOrgApiKeyWrapper(apiKeyToken: string): Promise<OrgApiKeyValidation> {\n        return validateOrgApiKey(authUrl, integrationApiKey, apiKeyToken)\n    }\n\n    function validateApiKeyWrapper(apiKeyToken: string): Promise<ApiKeyValidation> {\n        return validateApiKey(authUrl, integrationApiKey, apiKeyToken)\n    }\n\n    function verifyStepUpTotpChallengeWrapper(\n        verifyTotpChallengeRequest: VerifyTotpChallengeRequest\n    ): Promise<StepUpMfaVerifyTotpResponse> {\n        return verifyStepUpTotpChallenge(authUrl, integrationApiKey, verifyTotpChallengeRequest)\n    }\n\n    function verifyStepUpGrantWrapper(\n        verifyStepUpGrantRequest: VerifyStepUpGrantRequest\n    ): Promise<StepUpMfaVerifyGrantResponse> {\n        return verifyStepUpGrant(authUrl, integrationApiKey, verifyStepUpGrantRequest)\n    }\n\n    return {\n        // fetching functions\n        fetchTokenVerificationMetadata: fetchTokenVerificationMetadataWrapper,\n        fetchUserMetadataByUserId,\n        fetchUserMetadataByEmail,\n        fetchUserMetadataByUsername,\n        fetchBatchUserMetadataByUserIds,\n        fetchBatchUserMetadataByEmails,\n        fetchBatchUserMetadataByUsernames,\n        fetchOrg: fetchOrgWrapper,\n        fetchOrgByQuery: fetchOrgsByQueryWrapper,\n        fetchCustomRoleMappings: fetchCustomRoleMappingsWrapper,\n        fetchUsersByQuery: fetchUsersByQueryWrapper,\n        fetchUsersInOrg: fetchUsersInOrgWrapper,\n        fetchUserSignupQueryParams: fetchUserSignupQueryParamsWrapper,\n\n        // user management functions\n        createUser: createUserWrapper,\n        updateUserMetadata: updateUserMetadataWrapper,\n        updateUserEmail: updateUserEmailWrapper,\n        updateUserPassword: updateUserPasswordWrapper,\n        clearUserPassword: clearUserPasswordWrapper,\n        createMagicLink: createMagicLinkWrapper,\n        createAccessToken: createAccessTokenWrapper,\n        migrateUserFromExternalSource: migrateUserFromExternalSourceWrapper,\n        migrateUserPassword: migrateUserPasswordWrapper,\n        deleteUser: deleteUserWrapper,\n        disableUser: disableUserWrapper,\n        enableUser: enableUserWrapper,\n        disableUser2fa: disableUser2faWrapper,\n        resendEmailConfirmation: resendEmailConfirmationWrapper,\n        enableUserCanCreateOrgs: enableUserCanCreateOrgsWrapper,\n        disableUserCanCreateOrgs: disableUserCanCreateOrgsWrapper,\n        logoutAllUserSessions: logoutAllUserSessionsWrapper,\n        // org management functions\n        createOrg: createOrgWrapper,\n        addUserToOrg: addUserToOrgWrapper,\n        changeUserRoleInOrg: changeUserRoleInOrgWrapper,\n        removeUserFromOrg: removeUserFromOrgWrapper,\n        updateOrg: updateOrgWrapper,\n        subscribeOrgToRoleMapping: subscribeOrgToRoleMappingWrapper,\n        deleteOrg: deleteOrgWrapper,\n        allowOrgToSetupSamlConnection: allowOrgToSetupSamlConnectionWrapper,\n        disallowOrgToSetupSamlConnection: disallowOrgToSetupSamlConnectionWrapper,\n        createOrgSamlConnectionLink: createOrgSamlConnectionLinkWrapper,\n        inviteUserToOrg: inviteUserToOrgWrapper,\n        fetchPendingInvites: fetchPendingInvitesWrapper,\n        revokePendingOrgInvite: revokePendingOrgInviteWrapper,\n        fetchSamlSpMetadata: fetchSamlSpMetadataWrapper,\n        setSamlIdpMetadata: setSamlIdpMetadataWrapper,\n        samlGoLive: samlGoLiveWrapper,\n        deleteSamlConnection: deleteSamlConnectionWrapper,\n        // api keys functions\n        fetchApiKey: fetchApiKeyWrapper,\n        fetchCurrentApiKeys: fetchCurrentApiKeysWrapper,\n        fetchArchivedApiKeys: fetchArchivedApiKeysWrapper,\n        createApiKey: createApiKeyWrapper,\n        updateApiKey: updateApiKeyWrapper,\n        deleteApiKey: deleteApiKeyWrapper,\n        validateApiKey: validateApiKeyWrapper,\n        validatePersonalApiKey: validatePersonalApiKeyWrapper,\n        validateOrgApiKey: validateOrgApiKeyWrapper,\n        // step-up mfa functions\n        verifyStepUpTotpChallenge: verifyStepUpTotpChallengeWrapper,\n        verifyStepUpGrant: verifyStepUpGrantWrapper,\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAO,IAAM,sBAAN,cAAkC,MAAM;AAAA,EAE3C,YAAY,SAAiB;AACzB,UAAM,OAAO;AACb,SAAK,gBAAgB,KAAK,MAAM,OAAO;AAAA,EAC3C;AACJ;AAEO,IAAM,uBAAN,cAAmC,MAAM;AAAA,EAE5C,YAAY,SAAiB;AACzB,UAAM,OAAO;AACb,SAAK,gBAAgB,KAAK,MAAM,OAAO;AAAA,EAC3C;AACJ;AAEO,IAAM,+BAAN,cAA2C,MAAM;AAAA,EAEpD,YAAY,SAAiB;AACzB,UAAM,OAAO;AACb,SAAK,gBAAgB,KAAK,MAAM,OAAO;AAAA,EAC3C;AACJ;AAEO,IAAM,qBAAN,cAAiC,MAAM;AAAA,EAE1C,YAAY,SAAiB;AACzB,UAAM,OAAO;AACb,SAAK,gBAAgB,KAAK,MAAM,OAAO;AAAA,EAC3C;AACJ;AAEO,IAAM,wBAAN,cAAoC,MAAM;AAAA,EAE7C,YAAY,SAAiB;AACzB,UAAM,OAAO;AACb,SAAK,gBAAgB,KAAK,MAAM,OAAO;AAAA,EAC3C;AACJ;AAEO,IAAM,+BAAN,cAA2C,MAAM;AAAA,EAEpD,YAAY,SAAiB;AACzB,UAAM,OAAO;AACb,SAAK,gBAAgB,KAAK,MAAM,OAAO;AAAA,EAC3C;AACJ;AAEO,IAAM,6BAAN,cAAyC,MAAM;AAAA,EAElD,YAAY,SAAiB;AACzB,UAAM,OAAO;AACb,SAAK,gBAAgB,KAAK,MAAM,OAAO;AAAA,EAC3C;AACJ;AAEO,IAAM,qBAAN,cAAiC,MAAM;AAAA,EAE1C,YAAY,SAAiB;AACzB,UAAM,OAAO;AACb,SAAK,gBAAgB,KAAK,MAAM,OAAO;AAAA,EAC3C;AACJ;AAEO,IAAM,kCAAN,cAA8C,MAAM;AAAA,EAEvD,YAAY,SAAiB;AACzB,UAAM,OAAO;AACb,SAAK,gBAAgB,KAAK,MAAM,OAAO;AAAA,EAC3C;AACJ;AAEO,IAAM,qBAAN,cAAiC,MAAM;AAAA,EAG1C,YAAY,SAAiB;AACzB,UAAM,OAAO;AACb,SAAK,UAAU;AACf,SAAK,SAAS;AAAA,EAClB;AACJ;AAEO,IAAM,6BAAN,cAAyC,MAAM;AAAA,EAElD,YAAY,SAAiB;AACzB,UAAM,OAAO;AACb,SAAK,gBAAgB,KAAK,MAAM,OAAO;AAAA,EAC3C;AACJ;AAEO,IAAM,+BAAN,cAA2C,MAAM;AAAA,EAEpD,YAAY,SAAiB;AACzB,UAAM,OAAO;AACb,SAAK,gBAAgB,KAAK,MAAM,OAAO;AAAA,EAC3C;AACJ;AAEO,IAAM,wBAAN,cAAoC,MAAM;AAAA,EAG7C,YAAY,SAAiB;AACzB,UAAM,OAAO;AACb,SAAK,UAAU;AACf,SAAK,SAAS;AAAA,EAClB;AACJ;AAEO,IAAM,sBAAN,cAAkC,MAAM;AAAA,EAG3C,YAAY,SAAiB;AACzB,UAAM,OAAO;AACb,SAAK,UAAU;AACf,SAAK,SAAS;AAAA,EAClB;AACJ;AAEO,IAAM,2BAAN,cAAuC,MAAM;AAAA,EAEhD,YAAY,SAAiB;AACzB,UAAM,OAAO;AACb,SAAK,gBAAgB,KAAK,MAAM,OAAO;AAAA,EAC3C;AACJ;AAEO,IAAM,8BAAN,cAA0C,MAAM;AAAA,EAEnD,YAAY,SAAiB;AACzB,UAAM,OAAO;AACb,SAAK,gBAAgB,KAAK,MAAM,OAAO;AAAA,EAC3C;AACJ;AAEO,IAAM,8BAAN,cAA0C,MAAM;AAAA,EAEnD,YAAY,SAAiB;AACzB,UAAM,OAAO;AACb,SAAK,gBAAgB,KAAK,MAAM,OAAO;AAAA,EAC3C;AACJ;AAEO,IAAM,wBAAN,cAAoC,MAAM;AAAC;AAE3C,IAAM,0BAAN,cAAsC,MAAM;AAAA,EAE/C,YAAY,SAAiB;AACzB,UAAM,OAAO;AACb,SAAK,gBAAgB,KAAK,MAAM,OAAO;AAAA,EAC3C;AACJ;AAEO,IAAM,qCAAN,cAAiD,MAAM;AAAA,EAI1D,YAAY,WAAmB;AAC3B,UAAM,SAAS;AACf,UAAM,kBAAkB,KAAK,MAAM,SAAS;AAC5C,SAAK,cAAc,gBAAgB;AACnC,SAAK,kBAAkB,gBAAgB;AACvC,SAAK,YAAY,gBAAgB;AAAA,EACrC;AACJ;AAEO,IAAM,uBAAN,cAAmC,MAAM;AAAA,EAC5C,YAAY,SAAiB;AACzB,UAAM,OAAO;AAAA,EACjB;AACJ;AAEO,IAAM,wBAAN,cAAoC,MAAM;AAAA,EAE7C,YAAY,SAAiB;AACzB,UAAM,OAAO;AACb,SAAK,gBAAgB,KAAK,MAAM,OAAO;AAAA,EAC3C;AACJ;AAEO,IAAM,wBAAN,cAAoC,MAAM;AAAA,EAE7C,YAAY,SAAiB;AACzB,UAAM,OAAO;AACb,SAAK,gBAAgB,KAAK,MAAM,OAAO;AAAA,EAC3C;AACJ;AAEO,IAAM,wBAAN,cAAoC,MAAM;AAAA,EAE7C,YAAY,SAAiB;AACzB,UAAM,OAAO;AACb,SAAK,gBAAgB,KAAK,MAAM,OAAO;AAAA,EAC3C;AACJ;AAEO,IAAM,uBAAN,cAAmC,MAAM;AAAA,EAE5C,YAAY,SAAiB;AACzB,UAAM,OAAO;AACb,SAAK,gBAAgB,KAAK,MAAM,OAAO;AAAA,EAC3C;AACJ;AAEO,IAAM,sBAAN,cAAkC,MAAM;AAAA,EAE3C,YAAY,SAAiB;AACzB,UAAM,OAAO;AACb,SAAK,gBAAgB,KAAK,MAAM,OAAO;AAAA,EAC3C;AACJ;AAEO,IAAM,wBAAN,cAAoC,MAAM;AAAA,EAC7C,cAAc;AACV,UAAM,2DAA2D;AAAA,EACrE;AACJ;AAEO,IAAM,4BAAN,cAAwC,MAAM;AAAC;AAE/C,IAAM,yBAAN,cAAqC,MAAM;AAAC;AAE5C,IAAM,gCAAN,cAA4C,MAAM;AAAA,EAQrD,YAAY,WAAmB;AAC3B,UAAM,iBAAiB;AACvB,SAAK,YAAY,KAAK,MAAM,SAAS;AAAA,EACzC;AACJ;;;ACpKO,SAAS,cAAc,YAA+C;AACzE,MAAI,CAAC,YAAY;AACb,WAAO,EAAE,aAAa,UAAU;AAAA,EACpC;AAEA,UAAQ,WAAW,cAAc;AAAA,IAC7B,KAAK;AACD,aAAO,EAAE,aAAa,WAAW;AAAA,IACrC,KAAK;AACD,aAAO,EAAE,aAAa,aAAa;AAAA,IACvC,KAAK;AACD,aAAO,EAAE,aAAa,cAAc,UAAU,WAAW,SAAS;AAAA,IACtE,KAAK;AACD,aAAO,EAAE,aAAa,0BAA0B;AAAA,IACpD,KAAK;AACD,aAAO,EAAE,aAAa,YAAY,UAAU,WAAW,UAAU,OAAO,WAAW,OAAO;AAAA,IAC9F,KAAK;AACD,aAAO,EAAE,aAAa,gBAAgB;AAAA,IAC1C,KAAK;AACD,aAAO,EAAE,aAAa,6BAA6B;AAAA,IACvD;AACI,aAAO,EAAE,aAAa,UAAU;AAAA,EACxC;AACJ;;;ACzEO,IAAM,YAAN,MAAM,WAAU;AAAA,EAkBnB,YAAY,MAAY;AACpB,SAAK,SAAS,KAAK;AACnB,SAAK,qBAAqB,KAAK;AAE/B,SAAK,QAAQ,KAAK;AAClB,SAAK,YAAY,KAAK;AACtB,SAAK,WAAW,KAAK;AACrB,SAAK,WAAW,KAAK;AAErB,SAAK,eAAe,KAAK;AACzB,SAAK,qBAAqB,KAAK;AAC/B,SAAK,aAAa,KAAK;AACvB,SAAK,cAAc,KAAK;AACxB,SAAK,cAAc,KAAK;AAAA,EAC5B;AAAA,EAEO,eAA0C;AAC7C,QAAI,CAAC,KAAK,aAAa;AACnB,aAAO;AAAA,IACX;AACA,WAAO,KAAK,OAAO,KAAK,WAAW;AAAA,EACvC;AAAA,EAEO,iBAAqC;AACxC,WAAO,KAAK;AAAA,EAChB;AAAA,EAEO,OAAO,OAA0C;AACpD,QAAI,CAAC,KAAK,oBAAoB;AAC1B,aAAO;AAAA,IACX;AAEA,QAAI,CAAC,KAAK,mBAAmB,eAAe,KAAK,GAAG;AAChD,aAAO;AAAA,IACX;AAEA,WAAO,KAAK,mBAAmB,KAAK;AAAA,EACxC;AAAA,EAEO,aAAa,SAA4C;AAC5D,QAAI,CAAC,KAAK,oBAAoB;AAC1B,aAAO;AAAA,IACX;AAEA,UAAM,iBAAiB,QAAQ,YAAY,EAAE,QAAQ,MAAM,GAAG;AAC9D,eAAW,SAAS,KAAK,oBAAoB;AACzC,YAAM,gBAAgB,KAAK,OAAO,KAAK;AACvC,WAAI,+CAAe,oBAAmB,gBAAgB;AAClD,eAAO;AAAA,MACX;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAEO,gBAAgB,KAAkC;AACrD,QAAI,CAAC,KAAK,cAAc,CAAC,KAAK,WAAW,eAAe,GAAG,GAAG;AAC1D,aAAO;AAAA,IACX;AAEA,WAAO,KAAK,WAAW,GAAG;AAAA,EAC9B;AAAA,EAEO,UAA2B;AAC9B,QAAI,CAAC,KAAK,oBAAoB;AAC1B,aAAO,CAAC;AAAA,IACZ;AAEA,WAAO,OAAO,OAAO,KAAK,kBAAkB;AAAA,EAChD;AAAA,EAEO,kBAA2B;AAC9B,WAAO,CAAC,CAAC,KAAK;AAAA,EAClB;AAAA,EAEO,OAAO,OAAe,MAAuB;AAChD,UAAM,gBAAgB,KAAK,OAAO,KAAK;AACvC,QAAI,CAAC,eAAe;AAChB,aAAO;AAAA,IACX;AAEA,WAAO,cAAc,OAAO,IAAI;AAAA,EACpC;AAAA,EAEO,cAAc,OAAe,MAAuB;AACvD,UAAM,gBAAgB,KAAK,OAAO,KAAK;AACvC,QAAI,CAAC,eAAe;AAChB,aAAO;AAAA,IACX;AAEA,WAAO,cAAc,cAAc,IAAI;AAAA,EAC3C;AAAA,EAEO,cAAc,OAAe,YAA6B;AAC7D,UAAM,gBAAgB,KAAK,OAAO,KAAK;AACvC,QAAI,CAAC,eAAe;AAChB,aAAO;AAAA,IACX;AAEA,WAAO,cAAc,cAAc,UAAU;AAAA,EACjD;AAAA,EAEO,kBAAkB,OAAe,aAAgC;AACpE,UAAM,gBAAgB,KAAK,OAAO,KAAK;AACvC,QAAI,CAAC,eAAe;AAChB,aAAO;AAAA,IACX;AAEA,WAAO,cAAc,kBAAkB,WAAW;AAAA,EACtD;AAAA,EAEA,OAAc,SAAS,MAAuB;AAC1C,WAAO,IAAI,WAAU,IAAI;AAAA,EAC7B;AACJ;AAoEO,IAAM,gBAAN,MAAM,eAAc;AAAA,EAavB,YACI,OACA,SACA,aACA,gBACA,kBACA,mCACA,iBACA,kBACA,6BACA,aACF;AACE,SAAK,QAAQ;AACb,SAAK,UAAU;AACf,SAAK,cAAc;AACnB,SAAK,iBAAiB;AACtB,SAAK,mBAAmB,8CAAoB;AAE5C,SAAK,mBAAmB;AACxB,SAAK,oCAAoC;AACzC,SAAK,kBAAkB;AACvB,SAAK,8BAA8B,oEAA+B,CAAC;AAEnE,SAAK,cAAc;AAAA,EACvB;AAAA;AAAA,EAGA,IAAW,eAAuB;AAC9B,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAW,cAAwB;AAC/B,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,gCAA0C;AAC1C,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA,EAGO,OAAO,MAAuB;AACjC,QAAI,KAAK,qBAAqB,8BAA4B;AACtD,aAAO,KAAK,qBAAqB,QAAQ,KAAK,4BAA4B,SAAS,IAAI;AAAA,IAC3F,OAAO;AACH,aAAO,KAAK,qBAAqB;AAAA,IACrC;AAAA,EACJ;AAAA,EAEO,cAAc,MAAuB;AACxC,QAAI,KAAK,qBAAqB,8BAA4B;AACtD,aAAO,KAAK,qBAAqB,QAAQ,KAAK,4BAA4B,SAAS,IAAI;AAAA,IAC3F,OAAO;AACH,aAAO,KAAK,kCAAkC,SAAS,IAAI;AAAA,IAC/D;AAAA,EACJ;AAAA,EAEO,cAAc,YAA6B;AAC9C,WAAO,KAAK,gBAAgB,SAAS,UAAU;AAAA,EACnD;AAAA,EAEO,kBAAkB,aAAgC;AACrD,WAAO,YAAY,MAAM,CAAC,eAAe,KAAK,cAAc,UAAU,CAAC;AAAA,EAC3E;AAAA,EAEA,OAAc,SAAS,MAA6B;AAChD,UAAM,MAAM,KAAK,MAAM,IAAI;AAC3B,QAAI;AACA,aAAO,IAAI;AAAA,QACP,IAAI;AAAA,QACJ,IAAI;AAAA,QACJ,IAAI;AAAA,QACJ,IAAI;AAAA,QACJ,IAAI;AAAA,QACJ,IAAI;AAAA,QACJ,IAAI;AAAA,QACJ,IAAI;AAAA,QACJ,IAAI;AAAA,QACJ,IAAI;AAAA,MACR;AAAA,IACJ,SAAS,GAAP;AACE,cAAQ;AAAA,QACJ;AAAA,QACA;AAAA,MACJ;AACA,YAAM;AAAA,IACV;AAAA,EACJ;AACJ;AAWO,IAAK,mBAAL,kBAAKA,sBAAL;AACH,EAAAA,kBAAA,gBAAa;AACb,EAAAA,kBAAA,eAAY;AAFJ,SAAAA;AAAA,GAAA;AAuCL,SAAS,OAAO,YAAgC;AACnD,MAAI;AACJ,MAAI;AACJ,MAAI,WAAW,iBAAiB;AAC5B,2BAAuB,uBAAuB;AAAA,MAC1C,CAAC,WAAW,gBAAgB,MAAM,GAAG,WAAW;AAAA,IACpD,CAAC;AACD,kBAAc,WAAW,gBAAgB;AAAA,EAC7C,OAAO;AACH,2BAAuB,uBAAuB,WAAW,yBAAyB;AAClF,kBAAc;AAAA,EAClB;AAEA,QAAMC,aAAkB;AAAA,IACpB,QAAQ,WAAW;AAAA,IACnB;AAAA,IACA;AAAA,IACA,OAAO,WAAW;AAAA,IAClB,WAAW,WAAW;AAAA,IACtB,UAAU,WAAW;AAAA,IACrB,UAAU,WAAW;AAAA,IACrB,cAAc,WAAW;AAAA,IACzB,oBAAoB,WAAW;AAAA,IAC/B,UAAU,WAAW;AAAA,IACrB,YAAY,WAAW;AAAA,IACvB,aAAa,cAAc,WAAW,YAAY;AAAA,EACtD;AAEA,SAAOA;AACX;AAEO,SAAS,uBAAuB,YAEF;AACjC,MAAI,eAAe,QAAW;AAC1B,WAAO;AAAA,EACX;AACA,QAAMA,aAAkC,CAAC;AAEzC,aAAW,OAAO,OAAO,KAAK,UAAU,GAAG;AACvC,UAAM,iBAAiB,WAAW,GAAG;AACrC,QAAI,gBAAgB;AAChB,MAAAA,WAAU,GAAG,IAAI,IAAI;AAAA,QACjB,eAAe;AAAA,QACf,eAAe;AAAA,QACf,eAAe;AAAA,QACf,eAAe;AAAA,QACf,eAAe;AAAA,QACf,eAAe;AAAA,QACf,eAAe;AAAA,QACf,eAAe;AAAA,QACf,eAAe;AAAA,QACf,eAAe;AAAA,MACnB;AAAA,IACJ;AAAA,EACJ;AAEA,SAAOA;AACX;;;AC3aA,IAAM,uBAAuB;AAOtB,SAAS,YACZ,SACA,QACA,MACA,QACA,MACqB;AACrB,MAAI,UAAe;AAAA,IACf,eAAe,YAAY;AAAA,IAC3B,gBAAgB;AAAA,IAChB,oBAAoB,QAAQ;AAAA,EAChC;AAEA,SAAO,MAAM,uBAAuB,MAAM;AAAA,IACtC;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC,EAAE,KAAK,CAAC,aAAa;AAClB,WAAO,SAAS,KAAK,EAAE,KAAK,CAAC,QAAQ;AACjC,aAAO;AAAA,QACH,YAAY,SAAS;AAAA,QACrB,UAAU;AAAA,MACd;AAAA,IACJ,CAAC;AAAA,EACL,CAAC;AACL;;;AC9BA,IAAM,UAAU;AAChB,IAAM,WAAW;AAEV,SAAS,UAAU,IAAqB;AAC3C,SAAO,QAAQ,KAAK,EAAE;AAC1B;AAEO,SAAS,WAAW,IAAqB;AAC5C,SAAO,SAAS,KAAK,EAAE;AAC3B;AAEO,SAAS,qBAAqB,OAAuB;AACxD,MAAI,CAAC,OAAO;AACR,WAAO;AAAA,EACX,WAAW,MAAM,YAAY,EAAE,WAAW,SAAS,GAAG;AAClD,WAAO,MAAM,UAAU,CAAC;AAAA,EAC5B,OAAO;AACH,WAAO;AAAA,EACX;AACJ;AAEO,SAAS,sBAAsB,KAAqC;AACvE,QAAM,SAAS,IAAI,gBAAgB;AACnC,aAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,GAAG,GAAG;AAC5C,QAAI,UAAU,QAAW;AACrB,aAAO,IAAI,KAAK,KAAK;AAAA,IACzB;AAAA,EACJ;AACA,SAAO,OAAO,SAAS;AAC3B;AAEO,SAAS,0BAA0B,UAAkB;AACxD,MAAI,eAAe,KAAK,MAAM,QAAQ;AACtC,SAAO,YAAY,YAAY;AACnC;AAEA,IAAM,0BAA0B,CAAC,YAAY,cAAc;AAE3D,SAAS,gBAAgB,OAAY;AACjC,SACI,SACA,OAAO,UAAU,YACjB,MAAM,eAAe,OAAO,KAC5B,MAAM,eAAe,SAAS,KAC9B,MAAM,eAAe,gBAAgB,KACrC,MAAM,eAAe,aAAa,KAClC,MAAM,eAAe,kBAAkB,KACvC,MAAM,eAAe,mCAAmC,KACxD,MAAM,eAAe,iBAAiB;AAE9C;AAEA,SAAS,YAAY,KAAe;AAChC,MAAI,SAAc,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;AAC7C,WAAS,OAAO,KAAK;AACjB,QAAI,CAAC,IAAI,eAAe,GAAG,GAAG;AAC1B;AAAA,IACJ;AAEA,QAAI,QAAQ,IAAI,GAAG;AACnB,UAAM,mBAAmB,wBAAwB,SAAS,GAAG;AAC7D,QAAI,CAAC,oBAAoB,SAAS,OAAO,UAAU,UAAU;AACzD,cAAQ,YAAY,KAAK;AAAA,IAC7B;AAEA,QAAI,gBAAgB,KAAK,GAAG;AACxB,cAAQ,IAAI;AAAA,QACR,MAAM,OAAO;AAAA,QACb,MAAM,SAAS;AAAA,QACf,MAAM,aAAa;AAAA,QACnB,MAAM,gBAAgB;AAAA,QACtB,MAAM,kBAAkB;AAAA,QACxB,MAAM,mCAAmC;AAAA,QACzC,MAAM,iBAAiB;AAAA,QACvB,MAAM,kBAAkB;AAAA,QACxB,MAAM,6BAA6B;AAAA,QACnC,MAAM,aAAa;AAAA,MACvB;AAAA,IACJ;AAEA,QAAI;AACJ,QAAI,QAAQ,aAAa;AACrB,eAAS;AAAA,IACb,WAAW,QAAQ,0CAA0C;AACzD,eAAS;AAAA,IACb,WAAW,QAAQ,oBAAoB;AACnC,eAAS;AAAA,IACb,OAAO;AACH,eAAS,UAAU,GAAG;AAAA,IAC1B;AAEA,WAAO,MAAM,IAAI;AAAA,EACrB;AACA,SAAO;AACX;AAEA,SAAS,UAAU,KAAqB;AACpC,SAAO,IAAI,QAAQ,aAAa,SAAU,GAAG;AACzC,WAAO,EAAE,CAAC,EAAE,YAAY;AAAA,EAC5B,CAAC;AACL;;;AClGA,IAAM,gBAAgB;AAaf,SAAS,kBACZ,SACA,mBACA,0BACoB;AACpB,MAAI,CAAC,UAAU,yBAAyB,MAAM,GAAG;AAC7C,UAAM,IAAI,sBAAsB;AAAA,EACpC;AAEA,QAAM,UAAU;AAAA,IACZ,SAAS,yBAAyB;AAAA,IAClC,qBAAqB,yBAAyB;AAAA,IAC9C,eAAe,yBAAyB;AAAA,EAC5C;AACA,SAAO,YAAY,SAAS,mBAAmB,eAAe,QAAQ,KAAK,UAAU,OAAO,CAAC,EAAE;AAAA,IAC3F,CAAC,iBAAiB;AACd,UAAI,aAAa,eAAe,KAAK;AACjC,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,6BAA6B,aAAa,QAAQ;AAAA,MAChE,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,sBAAsB;AAAA,MACpC,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,MAAM,sCAAsC;AAAA,MAC1D,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAM,IAAI,MAAM,0CAA0C;AAAA,MAC9D;AAEA,aAAO,KAAK,MAAM,aAAa,QAAQ;AAAA,IAC3C;AAAA,EACJ;AACJ;;;ACrCA,IAAMC,iBAAgB;AAGf,SAAS,YAAY,SAAc,mBAA2B,UAAuC;AACxG,MAAI,CAAC,WAAW,QAAQ,GAAG;AACvB,UAAM,IAAI,qBAAqB,iBAAiB;AAAA,EACpD;AAEA,SAAO,YAAY,SAAS,mBAAmB,GAAGA,cAAa,IAAI,QAAQ,IAAI,KAAK,EAAE,KAAK,CAAC,iBAAiB;AACzG,QAAI,aAAa,eAAe,KAAK;AACjC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,IACxD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,IACxD,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,YAAM,IAAI,MAAM,kDAAkD;AAAA,IACtE;AAEA,WAAO,0BAA0B,aAAa,QAAQ;AAAA,EAC1D,CAAC;AACL;AAUO,SAAS,oBACZ,SACA,mBACA,aACyB;AACzB,QAAM,UAAU;AAAA,IACZ,QAAQ,YAAY;AAAA,IACpB,SAAS,YAAY;AAAA,IACrB,YAAY,YAAY;AAAA,IACxB,WAAW,YAAY;AAAA,IACvB,aAAa,YAAY;AAAA,EAC7B;AACA,QAAM,cAAc,sBAAsB,OAAO;AAEjD,SAAO,YAAY,SAAS,mBAAmB,GAAGA,cAAa,IAAI,WAAW,IAAI,KAAK,EAAE,KAAK,CAAC,iBAAiB;AAC5G,QAAI,aAAa,eAAe,KAAK;AACjC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,IACxD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,IACxD,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,YAAM,IAAI,MAAM,kDAAkD;AAAA,IACtE;AAEA,WAAO,0BAA0B,aAAa,QAAQ;AAAA,EAC1D,CAAC;AACL;AAEO,SAAS,qBACZ,SACA,mBACA,aACyB;AACzB,QAAM,UAAU;AAAA,IACZ,QAAQ,YAAY;AAAA,IACpB,SAAS,YAAY;AAAA,IACrB,YAAY,YAAY;AAAA,IACxB,WAAW,YAAY;AAAA,IACvB,aAAa,YAAY;AAAA,EAC7B;AACA,QAAM,cAAc,sBAAsB,OAAO;AAEjD,SAAO,YAAY,SAAS,mBAAmB,GAAGA,cAAa,aAAa,WAAW,IAAI,KAAK,EAAE;AAAA,IAC9F,CAAC,iBAAiB;AACd,UAAI,aAAa,eAAe,KAAK;AACjC,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAM,IAAI,MAAM,kDAAkD;AAAA,MACtE;AAEA,aAAO,0BAA0B,aAAa,QAAQ;AAAA,IAC1D;AAAA,EACJ;AACJ;AAUO,SAAS,aACZ,SACA,mBACA,cACkB;AAClB,QAAM,UAAU;AAAA,IACZ,QAAQ,aAAa;AAAA,IACrB,SAAS,aAAa;AAAA,IACtB,oBAAoB,aAAa;AAAA,IACjC,UAAU,aAAa;AAAA,EAC3B;AAEA,SAAO,YAAY,SAAS,mBAAmB,GAAGA,cAAa,IAAI,QAAQ,KAAK,UAAU,OAAO,CAAC,EAAE;AAAA,IAChG,CAAC,iBAAiB;AACd,UAAI,aAAa,eAAe,KAAK;AACjC,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,sBAAsB,aAAa,QAAQ;AAAA,MACzD,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAM,IAAI,MAAM,kDAAkD;AAAA,MACtE;AAEA,aAAO,0BAA0B,aAAa,QAAQ;AAAA,IAC1D;AAAA,EACJ;AACJ;AAEO,SAAS,eACZ,SACA,mBACA,aACyB;AACzB,QAAM,UAAU;AAAA,IACZ,eAAe,qBAAqB,WAAW;AAAA,EACnD;AAEA,SAAO,YAAY,SAAS,mBAAmB,GAAGA,cAAa,aAAa,QAAQ,KAAK,UAAU,OAAO,CAAC,EAAE;AAAA,IACzG,CAAC,iBAAiB;AACd,UAAI,aAAa,eAAe,KAAK;AACjC,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,wBAAwB,aAAa,QAAQ;AAAA,MAC3D,WAAW,aAAa,eAAe,KAAK;AACxC,YAAI;AACJ,YAAI;AACA,2BAAiB,IAAI,mCAAmC,aAAa,QAAQ;AAAA,QACjF,SAAS,aAAP;AACE,gBAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,QACxD;AACA,cAAM;AAAA,MACV,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAM,IAAI,MAAM,kDAAkD;AAAA,MACtE;AAEA,aAAO,0BAA0B,aAAa,QAAQ;AAAA,IAC1D;AAAA,EACJ;AACJ;AAQO,SAAS,aACZ,SACA,mBACA,UACA,cACgB;AAChB,MAAI,CAAC,WAAW,QAAQ,GAAG;AACvB,UAAM,IAAI,sBAAsB,iBAAiB;AAAA,EACrD;AAEA,QAAM,UAAU;AAAA,IACZ,oBAAoB,aAAa;AAAA,IACjC,UAAU,aAAa;AAAA,EAC3B;AAEA,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA,GAAGA,cAAa,IAAI,QAAQ;AAAA,IAC5B;AAAA,IACA,KAAK,UAAU,OAAO;AAAA,EAC1B,EAAE,KAAK,CAAC,iBAAiB;AACrB,QAAI,aAAa,eAAe,KAAK;AACjC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,IACxD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,sBAAsB,aAAa,QAAQ;AAAA,IACzD,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,YAAM,IAAI,MAAM,kDAAkD;AAAA,IACtE;AAEA,WAAO;AAAA,EACX,CAAC;AACL;AAGO,SAAS,aAAa,SAAc,mBAA2B,UAAoC;AACtG,MAAI,CAAC,WAAW,QAAQ,GAAG;AACvB,UAAM,IAAI,sBAAsB,iBAAiB;AAAA,EACrD;AAEA,SAAO,YAAY,SAAS,mBAAmB,GAAGA,cAAa,IAAI,QAAQ,IAAI,QAAQ,EAAE,KAAK,CAAC,iBAAiB;AAC5G,QAAI,aAAa,eAAe,KAAK;AACjC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,IACxD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,sBAAsB,aAAa,QAAQ;AAAA,IACzD,WAAW,aAAa,eAAe,KAAK;AACxC,aAAO;AAAA,IACX,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,YAAM,IAAI,MAAM,kDAAkD;AAAA,IACtE;AAEA,WAAO;AAAA,EACX,CAAC;AACL;;;AChOA,IAAM,oCAAoC;AAoBnC,SAAS,0BACZ,SACA,mBACA,4BACoC;AACpC,QAAM,UAAU;AAAA,IACZ,aAAa,2BAA2B;AAAA,IACxC,SAAS,2BAA2B;AAAA,IACpC,MAAM,2BAA2B;AAAA,IACjC,YAAY,2BAA2B;AAAA,IACvC,mBAAmB,2BAA2B;AAAA,EAClD;AACA,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,KAAK,UAAU,OAAO;AAAA,EAC1B,EAAE,KAAK,CAAC,iBAAiB;AAErB,QAAI,aAAa,cAAc,aAAa,aAAa,KAAK;AAC1D,YAAM,eAAe,KAAK,MAAM,aAAa,QAAQ;AACrD,aAAO;AAAA,QACH,aAAa,aAAa;AAAA,MAC9B;AAAA,IACJ;AAEA,UAAM,gBAAgB,aAAa,WAAW,KAAK,MAAM,aAAa,QAAQ,IAAI,CAAC;AAEnF,QAAI,aAAa,eAAe,KAAK;AACjC,YAAM,IAAI,sBAAsB,gCAAgC;AAAA,IACpE,WAAW,cAAc,eAAe,kBAAkB;AACtD,YAAM,IAAI,sBAAsB;AAAA,IACpC,WAAW,cAAc,eAAe,mBAAmB;AACvD,YAAM,IAAI,uBAAuB;AAAA,IACrC,WAAW,cAAc,eAAe,sBAAsB;AAC1D,YAAM,IAAI,0BAA0B;AAAA,IACxC,WAAW,cAAc,eAAe,0BAA0B;AAC9D,YAAM,IAAI,8BAA8B,aAAa,QAAQ;AAAA,IACjE,WAAW,cAAc,eAAe,iBAAiB;AACrD,YAAM,IAAI,sBAAsB;AAAA,IACpC,OAAO;AACH,YAAM,IAAI,oBAAoB,iDAAiD;AAAA,IACnF;AAAA,EACJ,CAAC;AACL;;;ACpEA,IAAM,qCAAqC;AAapC,SAAS,kBACZ,SACA,mBACA,0BACqC;AACrC,QAAM,UAAU;AAAA,IACZ,aAAa,yBAAyB;AAAA,IACtC,SAAS,yBAAyB;AAAA,IAClC,OAAO,yBAAyB;AAAA,EACpC;AACA,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,KAAK,UAAU,OAAO;AAAA,EAC1B,EAAE,KAAK,CAAC,iBAAiB;AAErB,QAAI,aAAa,cAAc,aAAa,aAAa,KAAK;AAC1D,aAAO;AAAA,QACH,SAAS;AAAA,MACb;AAAA,IACJ;AAEA,QAAI,gBAAqB,CAAC;AAC1B,QAAI;AACA,sBAAgB,aAAa,WAAW,KAAK,MAAM,aAAa,QAAQ,IAAI,CAAC;AAAA,IACjF,SAAS,GAAP;AACE,cAAQ,MAAM,kCAAkC,CAAC;AACjD,sBAAgB,CAAC;AAAA,IACrB;AAEA,QAAI,aAAa,eAAe,OAAO,cAAc,eAAe,gBAAgB;AAChF,YAAM,IAAI,sBAAsB,gCAAgC;AAAA,IACpE,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,IACxD,WAAW,cAAc,eAAe,0BAA0B;AAC9D,YAAM,gBAAgB,cAAc,gBAAgB,CAAC;AACrD,UAAI,cAAc,OAAO,KAAK,mBAAmB;AAC7C,eAAO;AAAA,UACH,SAAS;AAAA,QACb;AAAA,MACJ,OAAO;AACH,cAAM,IAAI,oBAAoB,aAAa,QAAQ;AAAA,MACvD;AAAA,IACJ,WAAW,cAAc,eAAe,iBAAiB;AACrD,YAAM,IAAI,sBAAsB;AAAA,IACpC,OAAO;AACH,YAAM,IAAI,oBAAoB,4CAA4C;AAAA,IAC9E;AAAA,EACJ,CAAC;AACL;;;ACtEA,IAAMC,iBAAgB;AAcf,SAAS,gBACZ,SACA,mBACA,wBACkB;AAClB,QAAM,UAAU;AAAA,IACZ,OAAO,uBAAuB;AAAA,IAC9B,iBAAiB,uBAAuB;AAAA,IACxC,kBAAkB,uBAAuB;AAAA,IACzC,qCAAqC,uBAAuB;AAAA,EAChE;AACA,SAAO,YAAY,SAAS,mBAAmBA,gBAAe,QAAQ,KAAK,UAAU,OAAO,CAAC,EAAE;AAAA,IAC3F,CAAC,iBAAiB;AACd,UAAI,aAAa,eAAe,KAAK;AACjC,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,2BAA2B,aAAa,QAAQ;AAAA,MAC9D,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAM,IAAI,MAAM,wCAAwC;AAAA,MAC5D;AAEA,aAAO,KAAK,MAAM,aAAa,QAAQ;AAAA,IAC3C;AAAA,EACJ;AACJ;;;ACtCA,IAAMC,iBAAgB;AAqBf,SAAS,8BACZ,SACA,mBACA,sCACoB;AACpB,QAAM;AAAA,IACF;AAAA,IACA,gBAAgB;AAAA,IAChB,gBAAgB;AAAA,IAChB,sBAAsB;AAAA,IACtB,gCAAgC;AAAA,IAChC,gCAAgC;AAAA,IAChC;AAAA,IACA,WAAW;AAAA,IACX,UAAU;AAAA,IACV;AAAA,IACA,YAAY;AAAA,IACZ;AAAA,EACJ,IAAI;AACJ,QAAM,UAAU;AAAA,IACZ;AAAA,IACA;AAAA,IAEA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IAEA;AAAA,IAEA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACA,SAAO,YAAY,SAAS,mBAAmB,GAAGA,cAAa,KAAK,QAAQ,KAAK,UAAU,OAAO,CAAC,EAAE;AAAA,IACjG,CAAC,iBAAiB;AACd,UAAI,aAAa,eAAe,KAAK;AACjC,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAM,IAAI,MAAM,mCAAmC;AAAA,MACvD;AAEA,aAAO,0BAA0B,aAAa,QAAQ;AAAA,IAC1D;AAAA,EACJ;AACJ;AAOO,SAAS,oBACZ,SACA,mBACA,4BACgB;AAChB,MAAI,CAAC,UAAU,2BAA2B,MAAM,GAAG;AAC/C,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAChC;AAEA,QAAM,UAAU;AAAA,IACZ,SAAS,2BAA2B;AAAA,IACpC,eAAe,2BAA2B;AAAA,EAC9C;AACA,SAAO,YAAY,SAAS,mBAAmB,GAAGA,cAAa,aAAa,QAAQ,KAAK,UAAU,OAAO,CAAC,EAAE;AAAA,IACzG,CAAC,iBAAiB;AACd,UAAI,aAAa,eAAe,KAAK;AACjC,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,6BAA6B,aAAa,QAAQ;AAAA,MAChE,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAM,IAAI,MAAM,4CAA4C;AAAA,MAChE;AAEA,aAAO,0BAA0B,aAAa,QAAQ;AAAA,IAC1D;AAAA,EACJ;AACJ;;;AClGA,IAAM,qBAAqB;AAC3B,IAAM,oBAAoB,qBAAqB;AAGxC,SAAS,SAAS,SAAc,mBAA2B,OAA6C;AAC3G,MAAI,CAAC,UAAU,KAAK,GAAG;AACnB,WAAO,QAAQ,QAAQ,IAAI;AAAA,EAC/B;AAEA,SAAO,YAAY,SAAS,mBAAmB,GAAG,iBAAiB,IAAI,KAAK,IAAI,KAAK,EAAE,KAAK,CAAC,iBAAiB;AAC1G,QAAI,aAAa,eAAe,KAAK;AACjC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,IACxD,WAAW,aAAa,eAAe,KAAK;AACxC,aAAO;AAAA,IACX,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI;AAAA,QACN;AAAA,MACJ;AAAA,IACJ,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,YAAM,IAAI,MAAM,iCAAiC;AAAA,IACrD;AAEA,WAAO,0BAA0B,aAAa,QAAQ;AAAA,EAC1D,CAAC;AACL;AAEO,SAAS,wBAAwB,SAAc,mBAAwD;AAC1G,SAAO,YAAY,SAAS,mBAAmB,wCAAwC,KAAK,EAAE;AAAA,IAC1F,CAAC,iBAAiB;AACd,UAAI,aAAa,eAAe,KAAK;AACjC,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI;AAAA,UACN;AAAA,QACJ;AAAA,MACJ,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAM,IAAI,MAAM,kDAAkD;AAAA,MACtE;AAEA,aAAO,0BAA0B,aAAa,QAAQ;AAAA,IAC1D;AAAA,EACJ;AACJ;AAyBO,SAAS,oBACZ,SACA,mBACA,QAC2B;AAC3B,QAAM,cAAc,IAAI,gBAAgB;AACxC,MAAI,iCAAQ,OAAO;AACf,gBAAY,IAAI,UAAU,OAAO,KAAK;AAAA,EAC1C;AACA,MAAI,iCAAQ,UAAU;AAClB,gBAAY,IAAI,aAAa,OAAO,SAAS,SAAS,CAAC;AAAA,EAC3D;AACA,MAAI,iCAAQ,YAAY;AACpB,gBAAY,IAAI,eAAe,OAAO,WAAW,SAAS,CAAC;AAAA,EAC/D;AACA,QAAM,OAAO,uCAAuC,YAAY,SAAS,CAAC;AAC1E,SAAO,YAAY,SAAS,mBAAmB,MAAM,KAAK,EAAE,KAAK,CAAC,iBAAiB;AAC/E,QAAI,aAAa,eAAe,KAAK;AACjC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,IACxD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI;AAAA,QACN;AAAA,MACJ;AAAA,IACJ,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,YAAM,IAAI,MAAM,6CAA6C;AAAA,IACjE;AAEA,WAAO,0BAA0B,aAAa,QAAQ;AAAA,EAC1D,CAAC;AACL;AAQO,SAAS,oBACZ,SACA,mBACA,OACoC;AACpC,QAAM,OAAO,qBAAqB,qBAAqB,KAAK;AAC5D,SAAO,YAAY,SAAS,mBAAmB,MAAM,KAAK,EAAE,KAAK,CAAC,iBAAiB;AAC/E,QAAI,aAAa,eAAe,KAAK;AACjC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,IACxD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI;AAAA,QACN;AAAA,MACJ;AAAA,IACJ,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,YAAM,IAAI,MAAM,kDAAkD;AAAA,IACtE;AAEA,WAAO,0BAA0B,aAAa,QAAQ;AAAA,EAC1D,CAAC;AACL;AAoBO,SAAS,gBAAgB,SAAc,mBAA2B,OAA4C;AACjH,QAAM,UAAU;AAAA,IACZ,WAAW,MAAM;AAAA,IACjB,aAAa,MAAM;AAAA,IACnB,UAAU,MAAM;AAAA,IAChB,MAAM,MAAM;AAAA,IACZ,eAAe,MAAM;AAAA,IACrB,QAAQ,MAAM;AAAA,EAClB;AACA,SAAO,YAAY,SAAS,mBAAmB,GAAG,iBAAiB,UAAU,QAAQ,KAAK,UAAU,OAAO,CAAC,EAAE;AAAA,IAC1G,CAAC,iBAAiB;AACd,UAAI,aAAa,eAAe,KAAK;AACjC,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,MAAM,mBAAmB,aAAa,QAAQ;AAAA,MAC5D,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI;AAAA,UACN;AAAA,QACJ;AAAA,MACJ,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAM,IAAI,MAAM,2CAA2C;AAAA,MAC/D;AAEA,aAAO,KAAK,MAAM,aAAa,UAAU,SAAU,KAAK,OAAO;AAC3D,YAAI,QAAQ,UAAU;AAClB,eAAK,QAAQ;AAAA,QACjB,WAAW,QAAQ,YAAY;AAC3B,eAAK,OAAO;AAAA,QAChB,WAAW,QAAQ,aAAa;AAC5B,eAAK,WAAW;AAAA,QACpB,WAAW,QAAQ,iBAAiB;AAChC,eAAK,cAAc;AAAA,QACvB,WAAW,QAAQ,cAAc;AAC7B,eAAK,YAAY;AAAA,QACrB,WAAW,QAAQ,gBAAgB;AAC/B,eAAK,cAAc;AAAA,QACvB,WAAW,QAAQ,aAAa;AAC5B,eAAK,WAAW;AAAA,QACpB,WAAW,QAAQ,oBAAoB;AACnC,eAAK,iBAAiB;AAAA,QAC1B,OAAO;AACH,iBAAO;AAAA,QACX;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AACJ;AAsBO,SAAS,UACZ,SACA,mBACA,kBACmB;AACnB,QAAM;AAAA,IACF;AAAA,IACA;AAAA,IACA,4BAA4B;AAAA,IAC5B,gCAAgC;AAAA,IAChC;AAAA,IACA;AAAA,IACA;AAAA,EACJ,IAAI;AACJ,QAAM,UAA+B;AAAA,IACjC;AAAA,IACA,+BAA+B;AAAA,IAC/B,mCAAmC;AAAA,EACvC;AACA,MAAI,QAAQ;AACR,YAAQ,QAAQ,IAAI;AAAA,EACxB;AACA,MAAI,UAAU;AACV,YAAQ,WAAW,IAAI;AAAA,EAC3B;AACA,MAAI,aAAa;AACb,YAAQ,eAAe,IAAI;AAAA,EAC/B;AACA,MAAI,uBAAuB;AACvB,YAAQ,0BAA0B,IAAI;AAAA,EAC1C;AACA,SAAO,YAAY,SAAS,mBAAmB,GAAG,iBAAiB,KAAK,QAAQ,KAAK,UAAU,OAAO,CAAC,EAAE;AAAA,IACrG,CAAC,iBAAiB;AACd,UAAI,aAAa,eAAe,KAAK;AACjC,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,mBAAmB,aAAa,QAAQ;AAAA,MACtD,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAM,IAAI,MAAM,iCAAiC;AAAA,MACrD;AAEA,aAAO,0BAA0B,aAAa,QAAQ;AAAA,IAC1D;AAAA,EACJ;AACJ;AASO,SAAS,aACZ,SACA,mBACA,qBACgB;AAtSpB;AAuSI,QAAM,UAAU;AAAA,IACZ,SAAS,oBAAoB;AAAA,IAC7B,QAAQ,oBAAoB;AAAA,IAC5B,MAAM,oBAAoB;AAAA,IAC1B,mBAAkB,yBAAoB,oBAApB,YAAuC,CAAC;AAAA,EAC9D;AACA,SAAO,YAAY,SAAS,mBAAmB,GAAG,iBAAiB,aAAa,QAAQ,KAAK,UAAU,OAAO,CAAC,EAAE;AAAA,IAC7G,CAAC,iBAAiB;AACd,UAAI,aAAa,eAAe,KAAK;AACjC,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,sBAAsB,aAAa,QAAQ;AAAA,MACzD,WAAW,aAAa,eAAe,KAAK;AACxC,eAAO;AAAA,MACX,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAM,IAAI,MAAM,uCAAuC;AAAA,MAC3D;AAEA,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AASO,SAAS,oBACZ,SACA,mBACA,4BACgB;AA3UpB;AA4UI,QAAM,UAAU;AAAA,IACZ,SAAS,2BAA2B;AAAA,IACpC,QAAQ,2BAA2B;AAAA,IACnC,MAAM,2BAA2B;AAAA,IACjC,mBAAkB,gCAA2B,oBAA3B,YAA8C,CAAC;AAAA,EACrE;AACA,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA,GAAG,iBAAiB;AAAA,IACpB;AAAA,IACA,KAAK,UAAU,OAAO;AAAA,EAC1B,EAAE,KAAK,CAAC,iBAAiB;AACrB,QAAI,aAAa,eAAe,KAAK;AACjC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,IACxD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,6BAA6B,aAAa,QAAQ;AAAA,IAChE,WAAW,aAAa,eAAe,KAAK;AACxC,aAAO;AAAA,IACX,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,YAAM,IAAI,MAAM,+CAA+C;AAAA,IACnE;AAEA,WAAO;AAAA,EACX,CAAC;AACL;AAOO,SAAS,kBACZ,SACA,mBACA,0BACgB;AAChB,QAAM,UAAU;AAAA,IACZ,SAAS,yBAAyB;AAAA,IAClC,QAAQ,yBAAyB;AAAA,EACrC;AACA,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA,GAAG,iBAAiB;AAAA,IACpB;AAAA,IACA,KAAK,UAAU,OAAO;AAAA,EAC1B,EAAE,KAAK,CAAC,iBAAiB;AACrB,QAAI,aAAa,eAAe,KAAK;AACjC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,IACxD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,2BAA2B,aAAa,QAAQ;AAAA,IAC9D,WAAW,aAAa,eAAe,KAAK;AACxC,aAAO;AAAA,IACX,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAChE;AAEA,WAAO;AAAA,EACX,CAAC;AACL;AAEO,SAAS,8BACZ,SACA,mBACA,OACgB;AAChB,MAAI,CAAC,UAAU,KAAK,GAAG;AACnB,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAChC;AAEA,SAAO,YAAY,SAAS,mBAAmB,GAAG,iBAAiB,IAAI,KAAK,eAAe,MAAM,EAAE;AAAA,IAC/F,CAAC,iBAAiB;AACd,UAAI,aAAa,eAAe,KAAK;AACjC,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,eAAe,KAAK;AACxC,eAAO;AAAA,MACX,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAM,IAAI,MAAM,0DAA0D;AAAA,MAC9E;AAEA,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AAEO,SAAS,iCACZ,SACA,mBACA,OACgB;AAChB,MAAI,CAAC,UAAU,KAAK,GAAG;AACnB,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAChC;AAEA,SAAO,YAAY,SAAS,mBAAmB,GAAG,iBAAiB,IAAI,KAAK,kBAAkB,MAAM,EAAE;AAAA,IAClG,CAAC,iBAAiB;AACd,UAAI,aAAa,eAAe,KAAK;AACjC,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,eAAe,KAAK;AACxC,eAAO;AAAA,MACX,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAM,IAAI,MAAM,6DAA6D;AAAA,MACjF;AAEA,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AAMA,SAAsB,4BAClB,SACA,mBACA,OACA,kBACyC;AAAA;AACzC,QAAI,CAAC,UAAU,KAAK,GAAG;AACnB,aAAO,QAAQ,OAAO,IAAI,MAAM,eAAe,CAAC;AAAA,IACpD;AAEA,UAAM,UAAU;AAAA,MACZ,oBAAoB;AAAA,IACxB;AAEA,UAAM,WAAW,MAAM;AAAA,MACnB;AAAA,MACA;AAAA,MACA,GAAG,iBAAiB,IAAI,KAAK;AAAA,MAC7B;AAAA,MACA,KAAK,UAAU,OAAO;AAAA,IAC1B;AACA,QAAI,SAAS,eAAe,KAAK;AAC7B,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD,WAAW,SAAS,eAAe,KAAK;AACpC,YAAM,IAAI,qBAAqB,SAAS,QAAQ;AAAA,IACpD,WAAW,SAAS,eAAe,KAAK;AACpC,YAAM,IAAI,MAAM,eAAe;AAAA,IACnC,WAAW,SAAS,cAAc,SAAS,cAAc,KAAK;AAC1D,YAAM,IAAI,MAAM,6CAA6C,SAAS,QAAQ,EAAE;AAAA,IACpF;AAEA,WAAO,KAAK,MAAM,SAAS,QAAQ;AAAA,EACvC;AAAA;AAWO,SAAS,mBACZ,SACA,mBACA,OACA,2BACgB;AAChB,MAAI,CAAC,UAAU,KAAK,GAAG;AACnB,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAChC;AAEA,MAAI,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,eAAe,0BAA0B;AAAA,IACzC,aAAa,0BAA0B;AAAA,IACvC,iBAAiB,0BAA0B;AAAA,IAC3C,UAAU,0BAA0B;AAAA,EACxC;AAEA,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA,GAAG,kBAAkB;AAAA,IACrB;AAAA,IACA,KAAK,UAAU,OAAO;AAAA,EAC1B,EAAE;AAAA,IACE,CAAC,iBAAiB;AACd,UAAI,aAAa,eAAe,KAAK;AACjC,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,mBAAmB,aAAa,QAAQ;AAAA,MACtD,WAAW,aAAa,eAAe,KAAK;AACxC,eAAO;AAAA,MACX,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAM,IAAI,MAAM,+EAA+E;AAAA,MACnG;AAEA,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AAEO,SAAS,WACZ,SACA,mBACA,OACgB;AAChB,MAAI,CAAC,UAAU,KAAK,GAAG;AACnB,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAChC;AAEA,SAAO,YAAY,SAAS,mBAAmB,GAAG,kBAAkB,8BAA8B,KAAK,IAAI,MAAM,EAAE;AAAA,IAC/G,CAAC,iBAAiB;AACd,UAAI,aAAa,eAAe,KAAK;AACjC,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,eAAe,KAAK;AACxC,eAAO;AAAA,MACX,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAM,IAAI,MAAM,4DAA4D;AAAA,MAChF;AAEA,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AAiBO,SAAS,UACZ,SACA,mBACA,kBACgB;AAChB,MAAI,CAAC,UAAU,iBAAiB,KAAK,GAAG;AACpC,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAChC;AAEA,QAAM,UAAU;AAAA,IACZ,MAAM,iBAAiB;AAAA,IACvB,gBAAgB,iBAAiB;AAAA,IACjC,UAAU,iBAAiB;AAAA,IAC3B,WAAW,iBAAiB;AAAA,IAC5B,oBAAoB,iBAAiB;AAAA,IACrC,oBAAoB,iBAAiB;AAAA,IACrC,QAAQ,iBAAiB;AAAA,IACzB,eAAe,iBAAiB;AAAA,IAChC,gBAAgB,iBAAiB;AAAA,IACjC,eAAe,iBAAiB;AAAA,EACpC;AACA,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA,GAAG,iBAAiB,IAAI,iBAAiB,KAAK;AAAA,IAC9C;AAAA,IACA,KAAK,UAAU,OAAO;AAAA,EAC1B,EAAE,KAAK,CAAC,iBAAiB;AACrB,QAAI,aAAa,eAAe,KAAK;AACjC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,IACxD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,mBAAmB,aAAa,QAAQ;AAAA,IACtD,WAAW,aAAa,eAAe,KAAK;AACxC,aAAO;AAAA,IACX,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,YAAM,IAAI,MAAM,iCAAiC;AAAA,IACrD;AAEA,WAAO;AAAA,EACX,CAAC;AACL;AAEO,SAAS,0BACZ,SACA,mBACA,OACA,uBACgB;AAChB,MAAI,CAAC,UAAU,KAAK,GAAG;AACnB,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAChC;AAEA,QAAM,UAAU;AAAA,IACZ,0BAA0B;AAAA,EAC9B;AACA,SAAO,YAAY,SAAS,mBAAmB,GAAG,iBAAiB,IAAI,KAAK,IAAI,OAAO,KAAK,UAAU,OAAO,CAAC,EAAE;AAAA,IAC5G,CAAC,iBAAiB;AACd,UAAI,aAAa,eAAe,KAAK;AACjC,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,mBAAmB,aAAa,QAAQ;AAAA,MACtD,WAAW,aAAa,eAAe,KAAK;AACxC,eAAO;AAAA,MACX,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAM,IAAI,MAAM,yDAAyD;AAAA,MAC7E;AAEA,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AAGO,SAAS,UAAU,SAAc,mBAA2B,OAAiC;AAChG,MAAI,CAAC,UAAU,KAAK,GAAG;AACnB,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAChC;AAEA,SAAO,YAAY,SAAS,mBAAmB,GAAG,iBAAiB,IAAI,KAAK,IAAI,QAAQ,EAAE,KAAK,CAAC,iBAAiB;AAC7G,QAAI,aAAa,eAAe,KAAK;AACjC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,IACxD,WAAW,aAAa,eAAe,KAAK;AACxC,aAAO;AAAA,IACX,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,YAAM,IAAI,MAAM,iCAAiC;AAAA,IACrD;AAEA,WAAO;AAAA,EACX,CAAC;AACL;AAOO,SAAS,uBACZ,SACA,mBACA,+BACgB;AAChB,QAAM,UAAU;AAAA,IACZ,eAAe,8BAA8B;AAAA,IAC7C,QAAQ,8BAA8B;AAAA,EAC1C;AACA,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,KAAK,UAAU,OAAO;AAAA,EAC1B,EAAE,KAAK,CAAC,iBAAiB;AACrB,QAAI,aAAa,eAAe,KAAK;AACjC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,IACxD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,gCAAgC,aAAa,QAAQ;AAAA,IACnE,WAAW,aAAa,eAAe,KAAK;AACxC,aAAO;AAAA,IACX,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,YAAM,IAAI,MAAM,wCAAwC;AAAA,IAC5D;AAEA,WAAO;AAAA,EACX,CAAC;AACL;AAEO,SAAS,qBACZ,SACA,mBACA,OACgB;AAChB,MAAI,CAAC,UAAU,KAAK,GAAG;AACnB,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAChC;AAEA,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA,GAAG,kBAAkB,sBAAsB,KAAK;AAAA,IAChD;AAAA,EACJ,EAAE,KAAK,CAAC,iBAAiB;AACrB,QAAI,aAAa,eAAe,KAAK;AACjC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,IACxD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,gCAAgC,aAAa,QAAQ;AAAA,IACnE,WAAW,aAAa,eAAe,KAAK;AACxC,aAAO;AAAA,IACX,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,YAAM,IAAI,MAAM,6CAA6C;AAAA,IACjE;AAEA,WAAO;AAAA,EACX,CAAC;AACL;;;AChuBA,IAAMC,iBAAgB;AAGf,SAAS,+BACZ,SACA,mBACA,iCACkC;AAClC,MAAI,iCAAiC;AACjC,WAAO,QAAQ,QAAQ,+BAA+B;AAAA,EAC1D;AAEA,SAAO,YAAY,SAAS,mBAAmBA,gBAAe,KAAK,EAAE,KAAK,CAAC,iBAAiB;AACxF,QAAI,aAAa,eAAe,KAAK;AACjC,cAAQ,MAAM,2BAA2B;AACzC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,IACxD,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAQ,MAAM,+CAA+C,aAAa,UAAU,EAAE;AACtF,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC7E;AAEA,UAAM,YAAY,KAAK,MAAM,aAAa,QAAQ;AAClD,WAAO;AAAA,MACH,aAAa,UAAU;AAAA,MACvB,QAAQ,aAAa,OAAO;AAAA,IAChC;AAAA,EACJ,CAAC;AACL;AAEA,SAAS,aAAa,SAAsB;AACxC,SAAO,QAAQ;AACnB;;;AC7BA,IAAMC,iBAAgB;AAyCf,SAAS,yBACZ,SACA,mBACA,WACA,OAC4B;AAC5B,QAAM,cAAc,sBAAsB,KAAK;AAC/C,SAAO,YAAY,SAAS,mBAAmB,GAAGA,cAAa,IAAI,SAAS,IAAI,WAAW,IAAI,KAAK,EAAE;AAAA,IAClG,CAAC,iBAAiB;AACd,UAAI,aAAa,eAAe,KAAK;AACjC,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,eAAe,KAAK;AACxC,eAAO;AAAA,MACX,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAM,IAAI,MAAM,2CAA2C;AAAA,MAC/D;AAEA,aAAO,0BAA0B,aAAa,QAAQ;AAAA,IAC1D;AAAA,EACJ;AACJ;AAEO,SAAS,qCACZ,SACA,mBACA,QACA,aAC4B;AAC5B,MAAI,UAAU,MAAM,GAAG;AACnB,WAAO,yBAAyB,SAAS,mBAAmB,QAAQ,EAAE,cAAc,eAAe,MAAM,CAAC;AAAA,EAC9G,OAAO;AACH,WAAO,QAAQ,QAAQ,IAAI;AAAA,EAC/B;AACJ;AAEO,SAAS,kBACZ,SACA,mBACA,OAC2B;AAC3B,QAAM,cAAc;AAAA,IAChB,WAAW,MAAM;AAAA,IACjB,aAAa,MAAM;AAAA,IACnB,UAAU,MAAM;AAAA,IAChB,mBAAmB,MAAM;AAAA,IACzB,cAAc,MAAM;AAAA,IACpB,gBAAgB,MAAM;AAAA,EAC1B;AACA,QAAM,IAAI,sBAAsB,WAAW;AAC3C,SAAO,YAAY,SAAS,mBAAmB,GAAGA,cAAa,UAAU,CAAC,IAAI,KAAK,EAAE,KAAK,CAAC,iBAAiB;AACxG,QAAI,aAAa,eAAe,KAAK;AACjC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,IACxD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,MAAM,mBAAmB,aAAa,QAAQ;AAAA,IAC5D,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAChE;AAEA,WAAO,0BAA0B,aAAa,QAAQ;AAAA,EAC1D,CAAC;AACL;AAEO,SAAS,gBACZ,SACA,mBACA,OACgC;AAChC,MAAI,CAAC,UAAU,MAAM,KAAK,GAAG;AACzB,UAAM,gBAAyC;AAAA,MAC3C,OAAO,CAAC;AAAA,MACR,YAAY;AAAA,MACZ,aAAa,MAAM,cAAc;AAAA,MACjC,UAAU,MAAM,YAAY;AAAA,MAC5B,gBAAgB;AAAA,IACpB;AACA,WAAO,QAAQ,QAAQ,aAAa;AAAA,EACxC;AAEA,QAAM,cAAc;AAAA,IAChB,WAAW,MAAM;AAAA,IACjB,aAAa,MAAM;AAAA,IACnB,cAAc,MAAM;AAAA,IACpB,MAAM,MAAM;AAAA,EAChB;AACA,QAAM,cAAc,sBAAsB,WAAW;AACrD,SAAO,YAAY,SAAS,mBAAmB,GAAGA,cAAa,QAAQ,MAAM,KAAK,IAAI,WAAW,IAAI,KAAK,EAAE;AAAA,IACxG,CAAC,iBAAiB;AACd,UAAI,aAAa,eAAe,KAAK;AACjC,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,MAAM,mBAAmB,aAAa,QAAQ;AAAA,MAC5D,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAM,IAAI,MAAM,0CAA0C;AAAA,MAC9D;AAEA,aAAO,0BAA0B,aAAa,QAAQ;AAAA,IAC1D;AAAA,EACJ;AACJ;AAGO,SAAS,uBACZ,SACA,mBACA,MACA,QACA,aACA,aACwC;AACxC,QAAM,cAAc,cAAc,sBAAsB,EAAE,cAAc,YAAY,CAAC,IAAI;AACzF,QAAM,WAAW,EAAE,CAAC,IAAI,GAAG,OAAO;AAClC,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA,GAAGA,cAAa,IAAI,IAAI,IAAI,WAAW;AAAA,IACvC;AAAA,IACA,KAAK,UAAU,QAAQ;AAAA,EAC3B,EAAE,KAAK,CAAC,iBAAiB;AACrB,QAAI,aAAa,eAAe,KAAK;AACjC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,IACxD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,MAAM,iBAAiB,aAAa,QAAQ;AAAA,IAC1D,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,YAAM,IAAI,MAAM,iDAAiD;AAAA,IACrE;AAEA,UAAM,gBAAgB,0BAA0B,aAAa,QAAQ;AAErE,UAAM,cAA+C,CAAC;AACtD,aAAS,gBAAgB,eAAe;AACpC,kBAAY,YAAY,YAAY,CAAC,IAAI;AAAA,IAC7C;AACA,WAAO;AAAA,EACX,CAAC;AACL;AAiBO,SAAS,WACZ,SACA,mBACA,mBACoB;AACpB,QAAM,UAAU;AAAA,IACZ,OAAO,kBAAkB;AAAA,IACzB,iBAAiB,kBAAkB;AAAA,IACnC,qCAAqC,kBAAkB;AAAA,IAEvD,UAAU,kBAAkB;AAAA,IAC5B,sCAAsC,kBAAkB;AAAA,IACxD,4BAA4B,kBAAkB;AAAA,IAE9C,UAAU,kBAAkB;AAAA,IAC5B,YAAY,kBAAkB;AAAA,IAC9B,WAAW,kBAAkB;AAAA,IAC7B,YAAY,kBAAkB;AAAA,EAClC;AACA,SAAO,YAAY,SAAS,mBAAmB,GAAGA,cAAa,KAAK,QAAQ,KAAK,UAAU,OAAO,CAAC,EAAE;AAAA,IACjG,CAAC,iBAAiB;AACd,UAAI,aAAa,eAAe,KAAK;AACjC,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,oBAAoB,aAAa,QAAQ;AAAA,MACvD,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAM,IAAI,MAAM,kCAAkC;AAAA,MACtD;AAEA,aAAO,0BAA0B,aAAa,QAAQ;AAAA,IAC1D;AAAA,EACJ;AACJ;AAEO,SAAS,YAAY,SAAc,mBAA2B,QAAkC;AACnG,MAAI,CAAC,UAAU,MAAM,GAAG;AACpB,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAChC;AAEA,SAAO,YAAY,SAAS,mBAAmB,GAAGA,cAAa,IAAI,MAAM,YAAY,MAAM,EAAE;AAAA,IACzF,CAAC,iBAAiB;AACd,UAAI,aAAa,eAAe,KAAK;AACjC,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,eAAe,KAAK;AACxC,eAAO;AAAA,MACX,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAM,IAAI,MAAM,mCAAmC;AAAA,MACvD;AAEA,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AAEO,SAAS,WAAW,SAAc,mBAA2B,QAAkC;AAClG,MAAI,CAAC,UAAU,MAAM,GAAG;AACpB,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAChC;AAEA,SAAO,YAAY,SAAS,mBAAmB,GAAGA,cAAa,IAAI,MAAM,WAAW,MAAM,EAAE,KAAK,CAAC,iBAAiB;AAC/G,QAAI,aAAa,eAAe,KAAK;AACjC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,IACxD,WAAW,aAAa,eAAe,KAAK;AACxC,aAAO;AAAA,IACX,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,YAAM,IAAI,MAAM,kCAAkC;AAAA,IACtD;AAEA,WAAO;AAAA,EACX,CAAC;AACL;AAEO,SAAS,eAAe,SAAc,mBAA2B,QAAkC;AACtG,MAAI,CAAC,UAAU,MAAM,GAAG;AACpB,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAChC;AAEA,SAAO,YAAY,SAAS,mBAAmB,GAAGA,cAAa,IAAI,MAAM,gBAAgB,MAAM,EAAE;AAAA,IAC7F,CAAC,iBAAiB;AACd,UAAI,aAAa,eAAe,KAAK;AACjC,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,eAAe,KAAK;AACxC,eAAO;AAAA,MACX,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAM,IAAI,MAAM,kCAAkC;AAAA,MACtD;AAEA,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AAEO,SAAS,wBAAwB,SAAc,mBAA2B,QAAkC;AAC/G,MAAI,CAAC,UAAU,MAAM,GAAG;AACpB,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAChC;AAEA,QAAM,UAAU;AAAA,IACZ,SAAS;AAAA,EACb;AAEA,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,KAAK,UAAU,OAAO;AAAA,EAC1B,EAAE,KAAK,CAAC,iBAAiB;AACrB,QAAI,aAAa,eAAe,KAAK;AACjC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD,WAAW,aAAa,eAAe,KAAK;AACxC,aAAO;AAAA,IACX,WAAW,aAAa,eAAe,KAAK;AACxC,UAAI;AACJ,UAAI;AACA,uBAAe,KAAK,MAAM,aAAa,QAAQ,EAAE;AAAA,MACrD,SAAS,aAAP;AACE,uBAAe,aAAa;AAAA,MAChC;AACA,YAAM,IAAI,qBAAqB,YAAY;AAAA,IAC/C,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,oBAAoB,aAAa,QAAQ;AAAA,IACvD,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,YAAM,IAAI,MAAM,iDAAiD;AAAA,IACrE;AAEA,WAAO;AAAA,EACX,CAAC;AACL;AASO,SAAS,gBACZ,SACA,mBACA,wBACgB;AAzWpB;AA0WI,QAAM,OAAO;AAAA,IACT,QAAQ,uBAAuB;AAAA,IAC/B,OAAO,uBAAuB;AAAA,IAC9B,MAAM,uBAAuB;AAAA,IAC7B,mBAAkB,4BAAuB,oBAAvB,YAA0C,CAAC;AAAA,EACjE;AAEA,SAAO,YAAY,SAAS,mBAAmB,+BAA+B,QAAQ,KAAK,UAAU,IAAI,CAAC,EAAE;AAAA,IACxG,CAAC,iBAAiB;AACd,UAAI,aAAa,eAAe,KAAK;AACjC,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,oBAAoB,aAAa,QAAQ;AAAA,MACvD,WAAW,aAAa,eAAe,KAAK;AACxC,eAAO;AAAA,MACX,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAM,IAAI,MAAM,+CAA+C;AAAA,MACnE;AAEA,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AAEO,SAAS,sBAAsB,SAAc,mBAA2B,QAAkC;AAC7G,MAAI,CAAC,UAAU,MAAM,GAAG;AACpB,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAChC;AAEA,SAAO,YAAY,SAAS,mBAAmB,GAAGA,cAAa,IAAI,MAAM,wBAAwB,MAAM,EAAE;AAAA,IACrG,CAAC,iBAAiB;AACd,UAAI,aAAa,eAAe,KAAK;AACjC,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,eAAe,KAAK;AACxC,eAAO;AAAA,MACX,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAM,IAAI,MAAM,6CAA6C;AAAA,MACjE;AAEA,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AAaO,SAAS,mBACZ,SACA,mBACA,QACA,2BACgB;AAChB,MAAI,CAAC,UAAU,MAAM,GAAG;AACpB,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAChC;AAEA,QAAM,UAAU;AAAA,IACZ,UAAU,0BAA0B;AAAA,IACpC,YAAY,0BAA0B;AAAA,IACtC,WAAW,0BAA0B;AAAA,IACrC,aAAa,0BAA0B;AAAA,IACvC,UAAU,0BAA0B;AAAA,IACpC,YAAY,0BAA0B;AAAA,IACtC,0BAA0B,0BAA0B;AAAA,IACpD,gBAAgB,0BAA0B;AAAA,EAC9C;AACA,SAAO,YAAY,SAAS,mBAAmB,GAAGA,cAAa,IAAI,MAAM,IAAI,OAAO,KAAK,UAAU,OAAO,CAAC,EAAE;AAAA,IACzG,CAAC,iBAAiB;AACd,UAAI,aAAa,eAAe,KAAK;AACjC,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,4BAA4B,aAAa,QAAQ;AAAA,MAC/D,WAAW,aAAa,eAAe,KAAK;AACxC,eAAO;AAAA,MACX,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAM,IAAI,MAAM,2CAA2C;AAAA,MAC/D;AAEA,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AAOO,SAAS,gBACZ,SACA,mBACA,QACAC,kBACgB;AAChB,MAAI,CAAC,UAAU,MAAM,GAAG;AACpB,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAChC;AAEA,QAAM,UAAU;AAAA,IACZ,WAAWA,iBAAgB;AAAA,IAC3B,4BAA4BA,iBAAgB;AAAA,EAChD;AACA,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA,GAAGD,cAAa,IAAI,MAAM;AAAA,IAC1B;AAAA,IACA,KAAK,UAAU,OAAO;AAAA,EAC1B,EAAE,KAAK,CAAC,iBAAiB;AACrB,QAAI,aAAa,eAAe,KAAK;AACjC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,IACxD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,yBAAyB,aAAa,QAAQ;AAAA,IAC5D,WAAW,aAAa,eAAe,KAAK;AACxC,aAAO;AAAA,IACX,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,YAAM,IAAI,MAAM,kCAAkC;AAAA,IACtD;AAEA,WAAO;AAAA,EACX,CAAC;AACL;AAOO,SAAS,mBACZ,SACA,mBACA,QACA,2BACgB;AAChB,MAAI,CAAC,UAAU,MAAM,GAAG;AACpB,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAChC;AAEA,QAAM,UAAU;AAAA,IACZ,UAAU,0BAA0B;AAAA,IACpC,sCAAsC,0BAA0B;AAAA,EACpE;AACA,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA,GAAGA,cAAa,IAAI,MAAM;AAAA,IAC1B;AAAA,IACA,KAAK,UAAU,OAAO;AAAA,EAC1B,EAAE,KAAK,CAAC,iBAAiB;AACrB,QAAI,aAAa,eAAe,KAAK;AACjC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,IACxD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,4BAA4B,aAAa,QAAQ;AAAA,IAC/D,WAAW,aAAa,eAAe,KAAK;AACxC,aAAO;AAAA,IACX,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,YAAM,IAAI,MAAM,sCAAsC;AAAA,IAC1D;AAEA,WAAO;AAAA,EACX,CAAC;AACL;AAEO,SAAS,wBAAwB,SAAc,mBAA2B,QAAkC;AAC/G,MAAI,CAAC,UAAU,MAAM,GAAG;AACpB,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAChC;AAEA,SAAO,YAAY,SAAS,mBAAmB,GAAGA,cAAa,IAAI,MAAM,2BAA2B,KAAK,EAAE;AAAA,IACvG,CAAC,iBAAiB;AACd,UAAI,aAAa,eAAe,KAAK;AACjC,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,eAAe,KAAK;AACxC,eAAO;AAAA,MACX,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAM,IAAI,MAAM,2CAA2C;AAAA,MAC/D;AAEA,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AAEO,SAAS,yBAAyB,SAAc,mBAA2B,QAAkC;AAChH,MAAI,CAAC,UAAU,MAAM,GAAG;AACpB,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAChC;AAEA,SAAO,YAAY,SAAS,mBAAmB,GAAGA,cAAa,IAAI,MAAM,4BAA4B,KAAK,EAAE;AAAA,IACxG,CAAC,iBAAiB;AACd,UAAI,aAAa,eAAe,KAAK;AACjC,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD,WAAW,aAAa,eAAe,KAAK;AACxC,cAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,MACxD,WAAW,aAAa,eAAe,KAAK;AACxC,eAAO;AAAA,MACX,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,cAAM,IAAI,MAAM,4CAA4C;AAAA,MAChE;AAEA,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AAEA,SAAsB,kBAAkB,SAAc,mBAA2B,QAAkC;AAAA;AAC/G,QAAI,CAAC,UAAU,MAAM,GAAG;AACpB,aAAO,QAAQ,QAAQ,KAAK;AAAA,IAChC;AAEA,UAAM,eAAe,MAAM;AAAA,MACvB;AAAA,MACA;AAAA,MACA,GAAGA,cAAa,IAAI,MAAM;AAAA,MAC1B;AAAA,IACJ;AACA,QAAI,aAAa,eAAe,KAAK;AACjC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,IACxD,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,YAAM,IAAI,MAAM,sCAAsC;AAAA,IAC1D;AACA,WAAO;AAAA,EACX;AAAA;AAGO,SAAS,WAAW,SAAc,mBAA2B,QAAkC;AAClG,MAAI,CAAC,UAAU,MAAM,GAAG;AACpB,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAChC;AAEA,SAAO,YAAY,SAAS,mBAAmB,GAAGA,cAAa,IAAI,MAAM,IAAI,QAAQ,EAAE,KAAK,CAAC,iBAAiB;AAC1G,QAAI,aAAa,eAAe,KAAK;AACjC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,IACxD,WAAW,aAAa,eAAe,KAAK;AACxC,aAAO;AAAA,IACX,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,YAAM,IAAI,MAAM,kCAAkC;AAAA,IACtD;AAEA,WAAO;AAAA,EACX,CAAC;AACL;AAMA,SAAsB,2BAClB,SACA,mBACA,QACqC;AAAA;AACrC,QAAI,CAAC,UAAU,MAAM,GAAG;AACpB,aAAO,QAAQ,QAAQ,IAAI;AAAA,IAC/B;AAEA,UAAM,eAAe,MAAM;AAAA,MACvB;AAAA,MACA;AAAA,MACA,GAAGA,cAAa,IAAI,MAAM;AAAA,MAC1B;AAAA,IACJ;AACA,QAAI,aAAa,eAAe,KAAK;AACjC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD,WAAW,aAAa,eAAe,KAAK;AACxC,YAAM,IAAI,qBAAqB,aAAa,QAAQ;AAAA,IACxD,WAAW,aAAa,eAAe,KAAK;AACxC,aAAO;AAAA,IACX,WAAW,aAAa,cAAc,aAAa,cAAc,KAAK;AAClE,YAAM,IAAI,MAAM,sDAAsD;AAAA,IAC1E;AAEA,UAAM,YAAY,KAAK,MAAM,aAAa,QAAQ;AAClD,WAAO,EAAE,2BAA2B,UAAU,8BAA8B,EAAE;AAAA,EAClF;AAAA;;;ACjpBA,SAAsB,uBAClB,SACA,mBACA,aACiC;AAAA;AACjC,UAAM,mBAAmB,MAAM,eAAe,SAAS,mBAAmB,WAAW;AACrF,QAAI,CAAC,iBAAiB,QAAQ,iBAAiB,KAAK;AAChD,YAAM,IAAI,wBAAwB,KAAK,UAAU,EAAE,eAAe,CAAC,wBAAwB,EAAE,CAAC,CAAC;AAAA,IACnG;AACA,WAAO;AAAA,MACH,MAAM,iBAAiB;AAAA,MACvB,UAAU,iBAAiB;AAAA,IAC/B;AAAA,EACJ;AAAA;AAEA,SAAsB,kBAClB,SACA,mBACA,aAC4B;AAAA;AAC5B,UAAM,mBAAmB,MAAM,eAAe,SAAS,mBAAmB,WAAW;AACrF,QAAI,CAAC,iBAAiB,KAAK;AACvB,YAAM,IAAI,wBAAwB,KAAK,UAAU,EAAE,eAAe,CAAC,oBAAoB,EAAE,CAAC,CAAC;AAAA,IAC/F;AACA,WAAO;AAAA,MACH,KAAK,iBAAiB;AAAA,MACtB,UAAU,iBAAiB;AAAA,MAC3B,MAAM,iBAAiB;AAAA,MACvB,WAAW,iBAAiB;AAAA,IAChC;AAAA,EACJ;AAAA;;;AC0EO,SAAS,QAAQ,SAAc,mBAA2B;AAC7D,WAAS,wCAA4E;AACjF,WAAO,+BAA+B,SAAS,iBAAiB;AAAA,EACpE;AAEA,WAAS,0BAA0B,QAAgB,aAAqD;AACpG,WAAO,qCAAqC,SAAS,mBAAmB,QAAQ,WAAW;AAAA,EAC/F;AAEA,WAAS,yBAAyB,OAAe,aAAqD;AAClG,WAAO,yBAAyB,SAAS,mBAAmB,SAAS;AAAA,MACjE;AAAA,MACA,cAAc,eAAe;AAAA,IACjC,CAAC;AAAA,EACL;AAEA,WAAS,4BAA4B,UAAkB,aAAqD;AACxG,WAAO,yBAAyB,SAAS,mBAAmB,YAAY;AAAA,MACpE;AAAA,MACA,cAAc,eAAe;AAAA,IACjC,CAAC;AAAA,EACL;AAEA,WAAS,gCACL,SACA,aAC2C;AAC3C,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,CAAC,MAAM,EAAE;AAAA,MACT,eAAe;AAAA,IACnB;AAAA,EACJ;AAEA,WAAS,+BACL,QACA,aAC0C;AAC1C,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,CAAC,MAAM,EAAE;AAAA,MACT,eAAe;AAAA,IACnB;AAAA,EACJ;AAEA,WAAS,kCACL,WACA,aAC6C;AAC7C,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,CAAC,MAAM,EAAE,YAAY;AAAA,MACrB,eAAe;AAAA,IACnB;AAAA,EACJ;AAEA,WAAS,gBAAgB,OAA6C;AAClE,WAAO,SAAS,SAAS,mBAAmB,KAAK;AAAA,EACrD;AAEA,WAAS,wBAAwB,UAA+C;AAC5E,WAAO,gBAAgB,SAAS,mBAAmB,QAAQ;AAAA,EAC/D;AAEA,WAAS,iCAA8D;AACnE,WAAO,wBAAwB,SAAS,iBAAiB;AAAA,EAC7D;AAEA,WAAS,yBAAyB,YAAqD;AACnF,WAAO,kBAAkB,SAAS,mBAAmB,UAAU;AAAA,EACnE;AAEA,WAAS,uBAAuB,iBAAoE;AAChG,WAAO,gBAAgB,SAAS,mBAAmB,eAAe;AAAA,EACtE;AAEA,WAAS,kCAAkC,QAAuD;AAC9F,WAAO,2BAA2B,SAAS,mBAAmB,MAAM;AAAA,EACxE;AAEA,WAAS,kBAAkB,mBAA4D;AACnF,WAAO,WAAW,SAAS,mBAAmB,iBAAiB;AAAA,EACnE;AAEA,WAAS,yBAAyB,QAAkC;AAChE,WAAO,kBAAkB,SAAS,mBAAmB,MAAM;AAAA,EAC/D;AAEA,WAAS,0BACL,QACA,2BACgB;AAChB,WAAO,mBAAmB,SAAS,mBAAmB,QAAQ,yBAAyB;AAAA,EAC3F;AAEA,WAAS,kBAAkB,QAAkC;AACzD,WAAO,WAAW,SAAS,mBAAmB,MAAM;AAAA,EACxD;AAEA,WAAS,mBAAmB,QAAkC;AAC1D,WAAO,YAAY,SAAS,mBAAmB,MAAM;AAAA,EACzD;AAEA,WAAS,kBAAkB,QAAkC;AACzD,WAAO,WAAW,SAAS,mBAAmB,MAAM;AAAA,EACxD;AAEA,WAAS,sBAAsB,QAAkC;AAC7D,WAAO,eAAe,SAAS,mBAAmB,MAAM;AAAA,EAC5D;AAEA,WAAS,+BAA+B,QAAkC;AACtE,WAAO,wBAAwB,SAAS,mBAAmB,MAAM;AAAA,EACrE;AAEA,WAAS,uBAAuB,QAAgB,wBAAkE;AAC9G,WAAO,gBAAgB,SAAS,mBAAmB,QAAQ,sBAAsB;AAAA,EACrF;AAEA,WAAS,0BACL,QACA,2BACgB;AAChB,WAAO,mBAAmB,SAAS,mBAAmB,QAAQ,yBAAyB;AAAA,EAC3F;AAEA,WAAS,+BAA+B,QAAkC;AACtE,WAAO,wBAAwB,SAAS,mBAAmB,MAAM;AAAA,EACrE;AAEA,WAAS,gCAAgC,QAAkC;AACvE,WAAO,yBAAyB,SAAS,mBAAmB,MAAM;AAAA,EACtE;AAEA,WAAS,uBAAuB,wBAAoE;AAChG,WAAO,gBAAgB,SAAS,mBAAmB,sBAAsB;AAAA,EAC7E;AAEA,WAAS,yBAAyB,0BAA0E;AACxG,WAAO,kBAAkB,SAAS,mBAAmB,wBAAwB;AAAA,EACjF;AAEA,WAAS,qCACL,sCACoB;AACpB,WAAO,8BAA8B,SAAS,mBAAmB,oCAAoC;AAAA,EACzG;AAEA,WAAS,2BAA2B,4BAA0E;AAC1G,WAAO,oBAAoB,SAAS,mBAAmB,0BAA0B;AAAA,EACrF;AAEA,WAAS,iBAAiB,kBAAyD;AAC/E,WAAO,UAAU,SAAS,mBAAmB,gBAAgB;AAAA,EACjE;AAEA,WAAS,oBAAoB,qBAA4D;AACrF,WAAO,aAAa,SAAS,mBAAmB,mBAAmB;AAAA,EACvE;AAEA,WAAS,2BAA2B,4BAA0E;AAC1G,WAAO,oBAAoB,SAAS,mBAAmB,0BAA0B;AAAA,EACrF;AAEA,WAAS,yBAAyB,0BAAsE;AACpG,WAAO,kBAAkB,SAAS,mBAAmB,wBAAwB;AAAA,EACjF;AAEA,WAAS,iBAAiB,kBAAsD;AAC5E,WAAO,UAAU,SAAS,mBAAmB,gBAAgB;AAAA,EACjE;AAEA,WAAS,iCAAiC,OAAe,uBAAiD;AACtG,WAAO,0BAA0B,SAAS,mBAAmB,OAAO,qBAAqB;AAAA,EAC7F;AAEA,WAAS,iBAAiB,OAAiC;AACvD,WAAO,UAAU,SAAS,mBAAmB,KAAK;AAAA,EACtD;AAEA,WAAS,qCAAqC,OAAiC;AAC3E,WAAO,8BAA8B,SAAS,mBAAmB,KAAK;AAAA,EAC1E;AAEA,WAAS,wCAAwC,OAAiC;AAC9E,WAAO,iCAAiC,SAAS,mBAAmB,KAAK;AAAA,EAC7E;AAEA,WAAS,mCACL,OACA,kBACyC;AACzC,WAAO,4BAA4B,SAAS,mBAAmB,OAAO,gBAAgB;AAAA,EAC1F;AAEA,WAAS,2BAA2B,OAAqD;AACrF,WAAO,oBAAoB,SAAS,mBAAmB,KAAK;AAAA,EAChE;AAEA,WAAS,0BAA0B,OAAe,iBAA8D;AAC5G,WAAO,mBAAmB,SAAS,mBAAmB,OAAO,eAAe;AAAA,EAChF;AAEA,WAAS,kBAAkB,OAAiC;AACxD,WAAO,WAAW,SAAS,mBAAmB,KAAK;AAAA,EACvD;AAEA,WAAS,4BAA4B,OAAiC;AAClE,WAAO,qBAAqB,SAAS,mBAAmB,KAAK;AAAA,EACjE;AAEA,WAAS,uBAAuB,wBAAkE;AAC9F,WAAO,gBAAgB,SAAS,mBAAmB,sBAAsB;AAAA,EAC7E;AAEA,WAAS,6BAA6B,QAAkC;AACpE,WAAO,sBAAsB,SAAS,mBAAmB,MAAM;AAAA,EACnE;AAEA,WAAS,2BAA2B,QAAiE;AACjG,WAAO,oBAAoB,SAAS,mBAAmB,MAAM;AAAA,EACjE;AAEA,WAAS,8BACL,+BACgB;AAChB,WAAO,uBAAuB,SAAS,mBAAmB,6BAA6B;AAAA,EAC3F;AAGA,WAAS,mBAAmB,UAAuC;AAC/D,WAAO,YAAY,SAAS,mBAAmB,QAAQ;AAAA,EAC3D;AAEA,WAAS,2BAA2B,aAA6D;AAC7F,WAAO,oBAAoB,SAAS,mBAAmB,WAAW;AAAA,EACtE;AAEA,WAAS,4BAA4B,aAA6D;AAC9F,WAAO,qBAAqB,SAAS,mBAAmB,WAAW;AAAA,EACvE;AAEA,WAAS,oBAAoB,cAAwD;AACjF,WAAO,aAAa,SAAS,mBAAmB,YAAY;AAAA,EAChE;AAEA,WAAS,oBAAoB,UAAkB,cAAqD;AAChG,WAAO,aAAa,SAAS,mBAAmB,UAAU,YAAY;AAAA,EAC1E;AAEA,WAAS,oBAAoB,UAAoC;AAC7D,WAAO,aAAa,SAAS,mBAAmB,QAAQ;AAAA,EAC5D;AAEA,WAAS,8BAA8B,aAAwD;AAC3F,WAAO,uBAAuB,SAAS,mBAAmB,WAAW;AAAA,EACzE;AAEA,WAAS,yBAAyB,aAAmD;AACjF,WAAO,kBAAkB,SAAS,mBAAmB,WAAW;AAAA,EACpE;AAEA,WAAS,sBAAsB,aAAgD;AAC3E,WAAO,eAAe,SAAS,mBAAmB,WAAW;AAAA,EACjE;AAEA,WAAS,iCACL,4BACoC;AACpC,WAAO,0BAA0B,SAAS,mBAAmB,0BAA0B;AAAA,EAC3F;AAEA,WAAS,yBACL,0BACqC;AACrC,WAAO,kBAAkB,SAAS,mBAAmB,wBAAwB;AAAA,EACjF;AAEA,SAAO;AAAA;AAAA,IAEH,gCAAgC;AAAA,IAChC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,UAAU;AAAA,IACV,iBAAiB;AAAA,IACjB,yBAAyB;AAAA,IACzB,mBAAmB;AAAA,IACnB,iBAAiB;AAAA,IACjB,4BAA4B;AAAA;AAAA,IAG5B,YAAY;AAAA,IACZ,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,IACjB,oBAAoB;AAAA,IACpB,mBAAmB;AAAA,IACnB,iBAAiB;AAAA,IACjB,mBAAmB;AAAA,IACnB,+BAA+B;AAAA,IAC/B,qBAAqB;AAAA,IACrB,YAAY;AAAA,IACZ,aAAa;AAAA,IACb,YAAY;AAAA,IACZ,gBAAgB;AAAA,IAChB,yBAAyB;AAAA,IACzB,yBAAyB;AAAA,IACzB,0BAA0B;AAAA,IAC1B,uBAAuB;AAAA;AAAA,IAEvB,WAAW;AAAA,IACX,cAAc;AAAA,IACd,qBAAqB;AAAA,IACrB,mBAAmB;AAAA,IACnB,WAAW;AAAA,IACX,2BAA2B;AAAA,IAC3B,WAAW;AAAA,IACX,+BAA+B;AAAA,IAC/B,kCAAkC;AAAA,IAClC,6BAA6B;AAAA,IAC7B,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,IACrB,wBAAwB;AAAA,IACxB,qBAAqB;AAAA,IACrB,oBAAoB;AAAA,IACpB,YAAY;AAAA,IACZ,sBAAsB;AAAA;AAAA,IAEtB,aAAa;AAAA,IACb,qBAAqB;AAAA,IACrB,sBAAsB;AAAA,IACtB,cAAc;AAAA,IACd,cAAc;AAAA,IACd,cAAc;AAAA,IACd,gBAAgB;AAAA,IAChB,wBAAwB;AAAA,IACxB,mBAAmB;AAAA;AAAA,IAEnB,2BAA2B;AAAA,IAC3B,mBAAmB;AAAA,EACvB;AACJ;","names":["OrgRoleStructure","camelCase","ENDPOINT_PATH","ENDPOINT_PATH","ENDPOINT_PATH","ENDPOINT_PATH","ENDPOINT_PATH","updateUserEmail"]}