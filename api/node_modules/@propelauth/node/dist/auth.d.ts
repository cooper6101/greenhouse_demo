import { TokenVerificationMetadata, User, UserAndOrgMemberInfo, UserClass } from "@propelauth/node-apis";
export type BaseAuthOptions = {
    authUrl: string;
    apiKey: string;
    /**
     * By default, this library performs a one-time fetch on startup for
     *   token verification metadata from your authUrl using your apiKey.
     *
     * This is usually preferred to make sure you have the most up to date information,
     *   however, in environments like serverless, this one-time fetch becomes a
     *   per-request fetch.
     *
     * In those environments, you can specify the token verification metadata manually,
     *   which you can obtain from your PropelAuth project.
     */
    manualTokenVerificationMetadata?: TokenVerificationMetadata;
};
export declare function initBaseAuth(opts: BaseAuthOptions): {
    fetchUserMetadataByUserId: (userId: string, includeOrgs?: boolean | undefined) => Promise<import("@propelauth/node-apis").UserMetadata | null>;
    fetchUserMetadataByEmail: (email: string, includeOrgs?: boolean | undefined) => Promise<import("@propelauth/node-apis").UserMetadata | null>;
    fetchUserMetadataByUsername: (username: string, includeOrgs?: boolean | undefined) => Promise<import("@propelauth/node-apis").UserMetadata | null>;
    fetchBatchUserMetadataByUserIds: (userIds: string[], includeOrgs?: boolean | undefined) => Promise<{
        [userId: string]: import("@propelauth/node-apis").UserMetadata;
    }>;
    fetchBatchUserMetadataByEmails: (emails: string[], includeOrgs?: boolean | undefined) => Promise<{
        [email: string]: import("@propelauth/node-apis").UserMetadata;
    }>;
    fetchBatchUserMetadataByUsernames: (usernames: string[], includeOrgs?: boolean | undefined) => Promise<{
        [username: string]: import("@propelauth/node-apis").UserMetadata;
    }>;
    fetchOrg: (orgId: string) => Promise<import("@propelauth/node-apis").Organization | null>;
    fetchOrgByQuery: (orgQuery: import("@propelauth/node-apis").OrgQuery) => Promise<import("@propelauth/node-apis").OrgQueryResponse>;
    fetchCustomRoleMappings: () => Promise<import("@propelauth/node-apis").CustomRoleMappings>;
    fetchUsersByQuery: (usersQuery: import("@propelauth/node-apis").UsersQuery) => Promise<import("@propelauth/node-apis").UsersPagedResponse>;
    fetchUsersInOrg: (usersInOrgQuery: import("@propelauth/node-apis").UsersInOrgQuery) => Promise<import("@propelauth/node-apis").UsersInOrgPagedResponse>;
    fetchUserSignupQueryParams: (userId: string) => Promise<import("@propelauth/node-apis").UserSignupQueryParams | null>;
    createUser: (createUserRequest: import("@propelauth/node-apis").CreateUserRequest) => Promise<import("@propelauth/node-apis").CreatedUser>;
    updateUserMetadata: (userId: string, updateUserMetadataRequest: import("@propelauth/node-apis").UpdateUserMetadataRequest) => Promise<boolean>;
    updateUserEmail: (userId: string, updateUserEmailRequest: import("@propelauth/node-apis").UpdateUserEmailRequest) => Promise<boolean>;
    updateUserPassword: (userId: string, updateUserPasswordRequest: import("@propelauth/node-apis").UpdateUserPasswordRequest) => Promise<boolean>;
    clearUserPassword: (userId: string) => Promise<boolean>;
    createMagicLink: (createMagicLinkRequest: import("@propelauth/node-apis").CreateMagicLinkRequest) => Promise<import("@propelauth/node-apis").MagicLink>;
    createAccessToken: (createAccessTokenRequest: import("@propelauth/node-apis").CreateAccessTokenRequest) => Promise<import("@propelauth/node-apis").AccessToken>;
    migrateUserFromExternalSource: (migrateUserFromExternalSourceRequest: import("@propelauth/node-apis").MigrateUserFromExternalSourceRequest) => Promise<import("@propelauth/node-apis").CreatedUser>;
    migrateUserPassword: (migrateUserPasswordRequest: import("@propelauth/node-apis").MigrateUserPasswordRequest) => Promise<boolean>;
    deleteUser: (userId: string) => Promise<boolean>;
    disableUser: (userId: string) => Promise<boolean>;
    enableUser: (userId: string) => Promise<boolean>;
    disableUser2fa: (userId: string) => Promise<boolean>;
    resendEmailConfirmation: (userId: string) => Promise<boolean>;
    enableUserCanCreateOrgs: (userId: string) => Promise<boolean>;
    disableUserCanCreateOrgs: (userId: string) => Promise<boolean>;
    logoutAllUserSessions: (userId: string) => Promise<boolean>;
    createOrg: (createOrgRequest: import("@propelauth/node-apis").CreateOrgRequest) => Promise<import("@propelauth/node-apis").CreatedOrg>;
    addUserToOrg: (addUserToOrgRequest: import("@propelauth/node-apis").AddUserToOrgRequest) => Promise<boolean>;
    changeUserRoleInOrg: (changeUserRoleInOrgRequest: import("@propelauth/node-apis").ChangeUserRoleInOrgRequest) => Promise<boolean>;
    removeUserFromOrg: (removeUserFromOrgRequest: import("@propelauth/node-apis").RemoveUserFromOrgRequest) => Promise<boolean>;
    updateOrg: (updateOrgRequest: import("@propelauth/node-apis").UpdateOrgRequest) => Promise<boolean>;
    subscribeOrgToRoleMapping: (orgId: string, customRoleMappingName: string) => Promise<boolean>;
    deleteOrg: (orgId: string) => Promise<boolean>;
    allowOrgToSetupSamlConnection: (orgId: string) => Promise<boolean>;
    disallowOrgToSetupSamlConnection: (orgId: string) => Promise<boolean>;
    createOrgSamlConnectionLink: (orgId: string, expiresInSeconds?: number | undefined) => Promise<import("@propelauth/node-apis").CreateSamlConnectionLinkResponse>;
    inviteUserToOrg: (inviteUserToOrgRequest: import("@propelauth/node-apis").InviteUserToOrgRequest) => Promise<boolean>;
    fetchPendingInvites: (params?: import("@propelauth/node-apis").FetchPendingInvitesParams | undefined) => Promise<import("@propelauth/node-apis").PendingInvitesPage>;
    revokePendingOrgInvite: (revokePendingOrgInviteRequest: import("@propelauth/node-apis").RevokePendingOrgInviteRequest) => Promise<boolean>;
    fetchSamlSpMetadata: (orgId: string) => Promise<import("@propelauth/node-apis").FetchSamlSpMetadataResponse>;
    setSamlIdpMetadata: (orgId: string, samlIdpMetadata: import("@propelauth/node-apis").SetSamlIdpMetadataRequest) => Promise<boolean>;
    samlGoLive: (orgId: string) => Promise<boolean>;
    deleteSamlConnection: (orgId: string) => Promise<boolean>;
    fetchApiKey: (apiKeyId: string) => Promise<import("@propelauth/node-apis").ApiKeyFull>;
    fetchCurrentApiKeys: (apiKeyQuery: import("@propelauth/node-apis").ApiKeysQueryRequest) => Promise<import("@propelauth/node-apis").ApiKeyResultPage>;
    fetchArchivedApiKeys: (apiKeyQuery: import("@propelauth/node-apis").ApiKeysQueryRequest) => Promise<import("@propelauth/node-apis").ApiKeyResultPage>;
    createApiKey: (apiKeyCreate: import("@propelauth/node-apis").ApiKeysCreateRequest) => Promise<import("@propelauth/node-apis").ApiKeyNew>;
    updateApiKey: (apiKeyId: string, ApiKeyUpdate: import("@propelauth/node-apis").ApiKeyUpdateRequest) => Promise<boolean>;
    deleteApiKey: (apiKeyId: string) => Promise<boolean>;
    validateApiKey: (apiKeyToken: string) => Promise<import("@propelauth/node-apis").ApiKeyValidation>;
    validatePersonalApiKey: (apiKeyToken: string) => Promise<import("@propelauth/node-apis").PersonalApiKeyValidation>;
    validateOrgApiKey: (apiKeyToken: string) => Promise<import("@propelauth/node-apis").OrgApiKeyValidation>;
    verifyStepUpTotpChallenge: (verifyTotpChallengeRequest: import("@propelauth/node-apis").VerifyTotpChallengeRequest) => Promise<import("@propelauth/node-apis").StepUpMfaVerifyTotpResponse>;
    verifyStepUpGrant: (verifyStepUpGrantRequest: import("@propelauth/node-apis").VerifyStepUpGrantRequest) => Promise<import("@propelauth/node-apis").StepUpMfaVerifyGrantResponse>;
    validateAccessTokenAndGetUserClass: (authorizationHeader?: string | undefined) => Promise<UserClass>;
    validateAccessTokenAndGetUser: (authorizationHeader?: string | undefined) => Promise<User>;
    validateAccessTokenAndGetUserWithOrgInfo: (authorizationHeader: string | undefined, requiredOrgInfo: RequiredOrgInfo) => Promise<UserAndOrgMemberInfo>;
    validateAccessTokenAndGetUserWithOrgInfoWithMinimumRole: (authorizationHeader: string | undefined, requiredOrgInfo: RequiredOrgInfo, minimumRole: string) => Promise<UserAndOrgMemberInfo>;
    validateAccessTokenAndGetUserWithOrgInfoWithExactRole: (authorizationHeader: string | undefined, requiredOrgInfo: RequiredOrgInfo, exactRole: string) => Promise<UserAndOrgMemberInfo>;
    validateAccessTokenAndGetUserWithOrgInfoWithPermission: (authorizationHeader: string | undefined, requiredOrgInfo: RequiredOrgInfo, permission: string) => Promise<UserAndOrgMemberInfo>;
    validateAccessTokenAndGetUserWithOrgInfoWithAllPermissions: (authorizationHeader: string | undefined, requiredOrgInfo: RequiredOrgInfo, permissions: string[]) => Promise<UserAndOrgMemberInfo>;
};
export type RequiredOrgInfo = {
    orgId?: string;
    orgName?: string;
};
export type HandleErrorOptions = {
    logError?: boolean;
    returnDetailedErrorToUser?: boolean;
};
export type HandleErrorResponse = {
    status: number;
    message: string;
};
export declare function handleError(e: unknown, opts?: HandleErrorOptions): HandleErrorResponse;
